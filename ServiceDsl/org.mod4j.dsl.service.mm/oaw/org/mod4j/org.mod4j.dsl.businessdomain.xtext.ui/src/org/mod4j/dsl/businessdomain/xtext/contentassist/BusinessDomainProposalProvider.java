/*
 * generated by Xtext
 */
package org.mendix.dsl.businessdomain.xtext.contentassist;

import java.util.List;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor;

import BusinessDomainDsl.BusinessClass;
import BusinessDomainDsl.EnumerationLiteral;
import BusinessDomainDsl.EnumerationProperty;
import BusinessDomainDsl.Property;
import BusinessDomainDsl.UniqueRule;

/**
 * see http://wiki.eclipse.org/Xtext/Documentation#Content_Assist on how to customize content assistant
 */
public class BusinessDomainProposalProvider extends AbstractBusinessDomainProposalProvider {
        
    /**
     * Get rid of the "Name - ID" default proposals
     */
    @Override
    protected boolean doCreateIdProposals(){
        return false;
    }

    /**
     * Get rid of the "Description" default proposals
     */
    @Override
    protected boolean doCreateStringProposals(){
        return false;
    }

    @Override
    public void completeEnumerationProperty_DefaultValueAsString(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        
        EnumerationProperty enumProp = (EnumerationProperty) model;
        List<EnumerationLiteral> enumList = enumProp.getType().getEnumerationLiterals();
        for (EnumerationLiteral enumLiteral : enumList){
            String proposal = enumLiteral.getName();
            proposal = getValueConverter().toString(proposal, "reference");
            ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
            acceptor.accept(completionProposal);
        }
    } 

    @Override
    public void completeUniqueRule_Properties(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        UniqueRule rule = (UniqueRule) model;
        List<Property> done = rule.getProperties();
        for (Property declared : allProperties(rule.getBusinessClass())) {
            if (!done.contains(declared)) {
                String proposal = declared.getName();
                // convert it to a valid STRING-terminal
                proposal = getValueConverter().toString(proposal, "reference");
                ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
                // register the proposal, the acceptor handles null-values gracefully
                acceptor.accept(completionProposal);
            }
        }
    }

    /**
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @generated NOT
     */
    public EList<Property> allProperties(BusinessClass bc) {
        EList<Property> result = new BasicEList<Property>();
        result.addAll(bc.getProperties());
        if (bc.getSuperclass() != null) {
            result.addAll(allProperties(bc.getSuperclass()));
        }
        return result;
    }
}
