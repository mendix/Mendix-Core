/*
* generated by Xtext
*/
package org.mendix.dsl.service.xtext.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.CharStream;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.mendix.dsl.service.xtext.services.ServiceGrammarAccess;

public class ServiceParser extends AbstractContentAssistParser {
	
	@Inject
	private ServiceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceLexer createLexer(CharStream stream) {
		return new org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceLexer(stream);
	}
	
	@Override
	protected org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser createParser() {
		org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser result = new org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				{
					put(grammarAccess.getServiceModelAccess().getAlternatives_5(), "rule__ServiceModel__Alternatives_5");
					put(grammarAccess.getServiceMethodAccess().getAlternatives(), "rule__ServiceMethod__Alternatives");
					put(grammarAccess.getSpecialMethodTypeAccess().getAlternatives(), "rule__SpecialMethodType__Alternatives");
					put(grammarAccess.getAssociationMethodTypeAccess().getAlternatives(), "rule__AssociationMethodType__Alternatives");
					put(grammarAccess.getServiceModelAccess().getGroup(), "rule__ServiceModel__Group__0");
					put(grammarAccess.getAssociationMethodAccess().getGroup(), "rule__AssociationMethod__Group__0");
					put(grammarAccess.getDtoReferenceAccess().getGroup(), "rule__DtoReference__Group__0");
					put(grammarAccess.getCustomMethodAccess().getGroup(), "rule__CustomMethod__Group__0");
					put(grammarAccess.getCustomMethodAccess().getGroup_3(), "rule__CustomMethod__Group_3__0");
					put(grammarAccess.getCustomMethodAccess().getGroup_3_3(), "rule__CustomMethod__Group_3_3__0");
					put(grammarAccess.getCustomMethodAccess().getGroup_4(), "rule__CustomMethod__Group_4__0");
					put(grammarAccess.getOutParameterAccess().getGroup(), "rule__OutParameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getSpecialMethodAccess().getGroup(), "rule__SpecialMethod__Group__0");
					put(grammarAccess.getCrudServiceAccess().getGroup(), "rule__CrudService__Group__0");
					put(grammarAccess.getServiceModelAccess().getDescriptionAssignment_0(), "rule__ServiceModel__DescriptionAssignment_0");
					put(grammarAccess.getServiceModelAccess().getNameAssignment_2(), "rule__ServiceModel__NameAssignment_2");
					put(grammarAccess.getServiceModelAccess().getDtoReferencesAssignment_4(), "rule__ServiceModel__DtoReferencesAssignment_4");
					put(grammarAccess.getServiceModelAccess().getCrudServicesAssignment_5_0(), "rule__ServiceModel__CrudServicesAssignment_5_0");
					put(grammarAccess.getServiceModelAccess().getMethodsAssignment_5_1(), "rule__ServiceModel__MethodsAssignment_5_1");
					put(grammarAccess.getAssociationMethodAccess().getDescriptionAssignment_0(), "rule__AssociationMethod__DescriptionAssignment_0");
					put(grammarAccess.getAssociationMethodAccess().getNameAssignment_1(), "rule__AssociationMethod__NameAssignment_1");
					put(grammarAccess.getAssociationMethodAccess().getMainAssignment_2(), "rule__AssociationMethod__MainAssignment_2");
					put(grammarAccess.getAssociationMethodAccess().getRolenameAssignment_4(), "rule__AssociationMethod__RolenameAssignment_4");
					put(grammarAccess.getAssociationMethodAccess().getTypeAssignment_5(), "rule__AssociationMethod__TypeAssignment_5");
					put(grammarAccess.getAssociationMethodAccess().getPartAssignment_6(), "rule__AssociationMethod__PartAssignment_6");
					put(grammarAccess.getDtoReferenceAccess().getModelnameAssignment_1(), "rule__DtoReference__ModelnameAssignment_1");
					put(grammarAccess.getDtoReferenceAccess().getNameAssignment_3(), "rule__DtoReference__NameAssignment_3");
					put(grammarAccess.getCustomMethodAccess().getDescriptionAssignment_0(), "rule__CustomMethod__DescriptionAssignment_0");
					put(grammarAccess.getCustomMethodAccess().getNameAssignment_2(), "rule__CustomMethod__NameAssignment_2");
					put(grammarAccess.getCustomMethodAccess().getInParametersAssignment_3_2(), "rule__CustomMethod__InParametersAssignment_3_2");
					put(grammarAccess.getCustomMethodAccess().getInParametersAssignment_3_3_1(), "rule__CustomMethod__InParametersAssignment_3_3_1");
					put(grammarAccess.getCustomMethodAccess().getOutParameterAssignment_4_1(), "rule__CustomMethod__OutParameterAssignment_4_1");
					put(grammarAccess.getOutParameterAccess().getDescriptionAssignment_0(), "rule__OutParameter__DescriptionAssignment_0");
					put(grammarAccess.getOutParameterAccess().getCollectionAssignment_1(), "rule__OutParameter__CollectionAssignment_1");
					put(grammarAccess.getOutParameterAccess().getTypeAssignment_2(), "rule__OutParameter__TypeAssignment_2");
					put(grammarAccess.getParameterAccess().getDescriptionAssignment_0(), "rule__Parameter__DescriptionAssignment_0");
					put(grammarAccess.getParameterAccess().getCollectionAssignment_1(), "rule__Parameter__CollectionAssignment_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
					put(grammarAccess.getParameterAccess().getNameAssignment_3(), "rule__Parameter__NameAssignment_3");
					put(grammarAccess.getSpecialMethodAccess().getDescriptionAssignment_0(), "rule__SpecialMethod__DescriptionAssignment_0");
					put(grammarAccess.getSpecialMethodAccess().getTypeAssignment_1(), "rule__SpecialMethod__TypeAssignment_1");
					put(grammarAccess.getSpecialMethodAccess().getNameAssignment_2(), "rule__SpecialMethod__NameAssignment_2");
					put(grammarAccess.getSpecialMethodAccess().getDtoAssignment_4(), "rule__SpecialMethod__DtoAssignment_4");
					put(grammarAccess.getCrudServiceAccess().getDescriptionAssignment_0(), "rule__CrudService__DescriptionAssignment_0");
					put(grammarAccess.getCrudServiceAccess().getDtoAssignment_2(), "rule__CrudService__DtoAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser typedParser = (org.mendix.dsl.service.xtext.contentassist.antlr.internal.InternalServiceParser) parser;
			typedParser.entryRuleServiceModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ServiceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ServiceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
