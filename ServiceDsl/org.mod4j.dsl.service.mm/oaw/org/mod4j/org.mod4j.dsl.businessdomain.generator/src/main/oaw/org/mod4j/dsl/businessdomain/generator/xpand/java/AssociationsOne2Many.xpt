«REM»
 Copyright (c) 2009 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT BusinessDomainDsl»


«EXTENSION Association»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«REM»
    Adds the accessor methods at the source side of a one to many association
    If the association is bidirectional, code is generated to uodate the target side as well.
«ENDREM»
«DEFINE one2ManyAccessorsTo FOR Association»
    /**
     * @param id
     *        id of the collection element to return
     *
     * @return «targetRoleName» («javaDomainClass(target.name)»)
     *         with the given id.
     */
    public «javaDomainClass(target.name)» getFrom«targetRoleName.toFirstUpper()» (Long id) {
        if (id == null) {
            return null;
        }
        for («javaDomainClass(target.name)» «javaDomainClass(target.name).toFirstLower()»: this.«targetRoleName») {
            if (id.equals(«javaDomainClass(target.name).toFirstLower()».getId())) {
                return «javaDomainClass(target.name).toFirstLower()»;
            }
        }
        return null;
    }
    /**
     * @return «targetRoleName» («getCollectionInterface()»<«target.name»>) 
     */
    public «getCollectionInterface()»<«javaDomainClass(target.name)»> get«targetRoleName.toFirstUpper()» () {
        return Collections.unmodifiable«getCollectionInterface()»(this.«targetRoleName»);
    }

    «EXPAND addToTargetCollection FOR this -»
    «EXPAND removeFromTargetCollection FOR this -»
    «IF ordered»
        «EXPAND addIndexedToTargetList FOR this -»
        «EXPAND AssociationsOne2Many::removeIndexedFromTargetCollection FOR this -»
        «EXPAND setInTargetCollection FOR this -»
    «ENDIF»
    
    /**
     * This operation should NOT be used by clients.  It implements the correct
     * addition of an element in an association.
     * 
     * @param element 
     */
    public void z_internalAddTo«this.targetRoleName»(«javaDomainClass(this.target.name)» element) {
        this.«this.targetRoleName».add(element);
    }
    
    /**
     * This operation should NOT be used by clients. It implements the correct
     * removal of an element in an association.
     * 
     * @param element 
     */
    public void z_internalRemoveFrom«this.targetRoleName»(«javaDomainClass(this.target.name)» element) {
        this.«this.targetRoleName».remove(element);
    }
«ENDDEFINE»

«REM»
    Adds the accessor methods at the target side of a bidirectional one to many association.
    Code to update the o=ther side si generated as well.
«ENDREM»
«DEFINE one2ManyAccessorsFrom FOR Association»
    /**
     * Implements the getter of association end 
     * 
     * @param element 
     */
    public «javaDomainClass(this.source.name)» get«this.sourceRoleName.toFirstUpper()»() {
        return this.«this.sourceRoleName»;
    }

    /**
     * Implements the setter of association end 
     * 
     * @param element 
     */
    public void set«this.sourceRoleName.toFirstUpper()»(«javaDomainClass(this.source.name)» element) {
        if ( this.«this.sourceRoleName» != element ) {
            if ( this.«this.sourceRoleName» != null ) {
                this.«this.sourceRoleName».z_internalRemoveFrom«this.targetRoleName»( 
                                              («javaDomainClass(this.target.name)») ( («javaDomainClass(this.target.name)»)this) );
            }
            this.«this.sourceRoleName» = element;
            if ( element != null ) {
                element.z_internalAddTo«this.targetRoleName»( («javaDomainClass(this.target.name)»)((«javaDomainClass(this.target.name)»)this) );
            }
        }
        validation.validate();
    }
    
    /**
     * Should NOT be used by clients! Implements the correct setting of the link
     * for + owner when a single element is added to it.
     * 
     * @param element 
     */
    public void z_internalAddTo«this.sourceRoleName»(«javaDomainClass(this.source.name)» element) {
        this.«this.sourceRoleName» = element;
    }
    
    /**
     * Should NOT be used by clients! Implements the correct setting of the link for + owner  
     *                  when a single element is removed to it.
     * 
     * @param element 
     */
    public void z_internalRemoveFrom«this.sourceRoleName» («javaDomainClass(this.source.name)» element) {
        this.«this.sourceRoleName» = null;
    }

«ENDDEFINE»

«DEFINE addToTargetCollection FOR Association»
    /**
     * Implements adding single element to a collection
     */
    public boolean addTo«targetRoleName.toFirstUpper()»(«javaDomainClass(target.name)» element) {
        if ( element == null ) {
            return false;
        }
        if ( this.«targetRoleName».contains(element) ) {
            return false;
        }
        this.«targetRoleName».add(element);
    «IF this.bidirectional»
        if ( element.«getterFrom(this)»() != null ) {
            element.«getterFrom(this)»().z_internalRemoveFrom«targetRoleName»(element);
        }
        element.z_internalAddTo«sourceRoleName»( («javaDomainClass(source.name)»)((«javaDomainClass(source.name)»)this) );
    «ENDIF»
        validation.validate();
        return true;
    }
«ENDDEFINE»

«DEFINE addIndexedToTargetList FOR Association»
    /**
     * Implements adding single element to an ordered collection at a specified
     * location.
     */
    public void addTo«targetRoleName.toFirstUpper()»(int index, «javaDomainClass(target.name)» element) {
        if ( element == null ) {
            return;
        }
        this.«targetRoleName».add(index, element);
    «IF this.bidirectional -»
        if ( element.«getterFrom(this)»() != null ) {
            element.«getterFrom(this)»().z_internalRemoveFrom«targetRoleName»(element);
        }
        element.z_internalAddTo«sourceRoleName»( («javaDomainClass(source.name)»)((«javaDomainClass(source.name)»)this) );
    «ENDIF»
        validation.validate();
    }
«ENDDEFINE»

«DEFINE removeFromTargetCollection FOR Association»
    /**
     * Implements removal of a single element from feature 
     * 
     * @param element 
     */
    public boolean removeFrom«this.targetRoleName.toFirstUpper()»(«javaDomainClass(this.target.name)» element) {
        if ( element == null ) {
            return false;
        }
        if (this.«this.targetRoleName».remove(element)) {
    «IF this.bidirectional -»
            element.z_internalRemoveFrom«this.sourceRoleName»( («javaDomainClass(this.source.name)»)((«javaDomainClass(this.source.name)»)this) );
    «ENDIF»
            validation.validate();
            return true;
        }
        return false;
    }
«ENDDEFINE»

«DEFINE removeIndexedFromTargetCollection FOR Association»
    /**
     * Removes the element at the specified position in {@link «this.targetRoleName»}.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices). Returns the element that was removed from the list. 
     * 
     * @param index
     *        the index of the element to remove. 
     * @return the element previously at the specified position.
     * @throws IndexOutOfBoundsException
     *         if the index is out of range (index < 0 || index >= size()).
     */
    public «javaDomainClass(this.target.name)» removeFrom«this.targetRoleName.toFirstUpper()»(int index) {
        «javaDomainClass(this.target.name)» result;
        result = this.«this.targetRoleName».remove(index);
    «IF this.bidirectional -»
        result.z_internalRemoveFrom«this.sourceRoleName»( («javaDomainClass(this.source.name)»)((«javaDomainClass(this.source.name)»)this) );
    «ENDIF»
        validation.validate();
        return result;
    }
«ENDDEFINE»

«DEFINE setInTargetCollection FOR Association»
    /**
     * Replaces the element at the specified position in
     * {@link «this.targetRoleName»} with the specified element.
     * 
     * @param index
     *        index of element to replace.
     * @param element
     *        element to be stored at the specified position. 
     * @return the element previously at the specified position.
     * @throws IndexOutOfBoundsException
     *         if the index is out of range (index < 0 || index >= size()).
     */
    public «javaDomainClass(this.target.name)» set«this.targetRoleName.toFirstUpper()»(int index, «javaDomainClass(target.name)» element) {
        «javaDomainClass(this.target.name)» result;
        validation.setActive(false);
        result = removeFrom«this.targetRoleName.toFirstUpper()»(index);
        addTo«targetRoleName.toFirstUpper()»(index, element);
        validation.setActive(true);
        validation.validate();
        return result;
    }
«ENDDEFINE»