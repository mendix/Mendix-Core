«REM»
 Copyright (c) 2009 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT BusinessDomainDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION BusinessClass»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»

«DEFINE daoImplementationBase FOR BusinessDomainDsl::BusinessClass»
«EXPAND JavaComments::regenerationWarningHeader ("Mod4j BusinessDomainDsl generator: DaoImplBase.xpt") FOR this»

package «getDaoImplPackage()»;

import java.sql.SQLException;
import java.util.List;
import java.util.Set;
import java.util.HashSet;

import «javaDomainClassPath(this.name)»;
import «javaDaoBaseInterfacePath(this.name)»;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Example;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.util.Assert;
import org.mod4j.runtime.queries.SearchParameters;
«FOREACH (getToOneAssociationsToInHierarchy().target.addAll(getToOneAssociationsFromInHierarchy().source)).toSet() AS e -»
«IF e != this»
    import «javaDomainClassPath(e.name)»;
    import «javaDaoBaseClassPath(e.name)»;
«ENDIF»
«ENDFOREACH»

/**
 * «javaDomainClass(this.name)» Data Access Object (DAO) Implementation. Responsible for Creating,
 * Reading, Updating, Deleting and retrieving lists of «javaDomainClass(this.name)» objects in the database.
 * All database access is done here.
 *  
 * @author Generated by Mod4j
 */
public class «javaDaoBaseClass(this.name)» extends HibernateDaoSupport implements «javaDaoBaseInterface(this.name)» {

    /**
     * {@inheritDoc}
     */
    public «javaDomainClass(this.name)» retrieve(Long id) {
        Object o = getHibernateTemplate().get(«javaDomainClass(this.name)».class, id);
        if (o == null) {
            return null;
        }
        return («javaDomainClass(this.name)») o;
    }

    /**
     * {@inheritDoc}
     */
    public Long add(«javaDomainClass(this.name)» object) {
        Long result = (Long) getHibernateTemplate().save(object);
        return result;
    }

    /**
     * {@inheritDoc}
     */
    public void delete(«javaDomainClass(this.name)» object ) {
        getHibernateTemplate().delete(object);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listAll() {
        return getHibernateTemplate().find("from «javaDomainClass(this.name)»");
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listPage(final int firstResult, final int maxResults) {

        DetachedCriteria criteria = DetachedCriteria.forClass(«javaDomainClass(this.name)».class);
        return getHibernateTemplate().findByCriteria(criteria, firstResult, maxResults);
    }  
    
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listPage(final int firstResult, final int maxResults,
        final String sortProperty, final boolean isAscending) {
        
        Assert.notNull(sortProperty, "argument [sortProperty] may not be null");
        
        org.hibernate.criterion.Order order;
        if (isAscending) {
            order = org.hibernate.criterion.Order.asc(sortProperty);
        } else {
            order = org.hibernate.criterion.Order.desc(sortProperty);
        }
        DetachedCriteria criteria = DetachedCriteria.forClass(«javaDomainClass(this.name)».class).addOrder(order);
        return getHibernateTemplate().findByCriteria(criteria, firstResult, maxResults);
    }
    
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> listPageByExample(final «javaDomainClass(this.name)» example, final int firstResult, final int maxResults,
            final String sortProperty, final boolean isAscending) {
            
        Assert.notNull(example, "argument [example] may not be null");
        Assert.notNull(sortProperty, "argument [sortProperty] may not be null");
        
        List<«javaDomainClass(this.name)»> result;
        result = getHibernateTemplate().executeFind(new HibernateCallback() {
            public Object doInHibernate(final Session session) throws HibernateException, SQLException {

                org.hibernate.criterion.Order order;
                if (isAscending) {
                    order = org.hibernate.criterion.Order.asc(sortProperty);
                } else {
                    order = org.hibernate.criterion.Order.desc(sortProperty);
                }
                return session.createCriteria(«javaDomainClass(this.name)».class).add(
                        Example.create(example).enableLike(MatchMode.ANYWHERE).ignoreCase())
                        .setFirstResult(firstResult).setMaxResults(maxResults).addOrder(order).list();
            }
        });
        return result;
    }

    /**
     * {@inheritDoc}
     */
    public long count() {
        return ((Long) getHibernateTemplate().iterate("select count(*) from «javaDomainClass(this.name)»").next()).longValue();
    }
    
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public long count(final «javaDomainClass(this.name)» example) {
    
        Assert.notNull(example, "argument [example] may not be null");

        List<Integer> result;
        result = getHibernateTemplate().executeFind(new HibernateCallback() {
            public Object doInHibernate(final Session session)
                    throws HibernateException, SQLException {
                Criteria crit = session.createCriteria(«javaDomainClass(this.name)».class);
                crit.setProjection(Projections.rowCount());
                crit.add(Example.create(example).enableLike(MatchMode.ANYWHERE).ignoreCase());
                return crit.list();
            }
        });
        return result.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public long countByExample(final «javaDomainClass(this.name)» example) {

        Assert.notNull(example, "argument [example] may not be null");

        final SearchParameters parameters = new SearchParameters();
        parameters.setMatchMode(MatchMode.ANYWHERE);
        parameters.setIgnoreCase(Boolean.TRUE);

        List<Integer> result;
        result = getHibernateTemplate().executeFind(new «javaDomainClass(this.name)»HibernateCallback(example, parameters, true));
        return result.get(0);
    }
    
    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public long countByExample(final «javaDomainClass(this.name)» example, final SearchParameters parameters) {
  
        if (parameters == null) {
            return countByExample(example);
        }
        
        Assert.notNull(example, "argument [example] may not be null");

        List<Integer> result;
        result = getHibernateTemplate().executeFind(new «javaDomainClass(this.name)»HibernateCallback(example, parameters, true));
        return result.get(0);
    }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> findByExample(final «javaDomainClass(this.name)» example) {
        
        Assert.notNull(example, "argument [example] may not be null");
        
        SearchParameters parameters = new SearchParameters();
        parameters.setMatchMode(MatchMode.ANYWHERE);
        parameters.setIgnoreCase(Boolean.TRUE);
        
        List<«javaDomainClass(this.name)»> result;
        result = getHibernateTemplate().executeFind(new «javaDomainClass(this.name)»HibernateCallback(example, parameters));
        return result;
     }

    /**
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    public List<«javaDomainClass(this.name)»> findByExample(final «javaDomainClass(this.name)» example, final SearchParameters parameters) {
        
        if (parameters == null) {
            return findByExample(example);
        }

        Assert.notNull(example, "argument [example] may not be null");

        List<«javaDomainClass(this.name)»> result;
        result = getHibernateTemplate().executeFind(new «javaDomainClass(this.name)»HibernateCallback(example, parameters));
        return result;
     }

«IF getAllToOneAssociationsInHierarchy().toSet().size > 0»
    /**
     * Composes the given <code>criteria</code> object for associations of the given <code>example</code>.
     * Adds an example object for each of the to-one associations of the <code>example</code> object,
     * or, if the id is set, adds a restriction based on the id. All eventually existing to-many associations of
     * <code>example</code> object are ignored.
     * The <code>addedAssociations</code> set is used to prevent looping in circular associations.
     * 
     * @param criteria
     * @param example
     * @param associationPath
     * @param parameters
     * @param addedAssociations
     */
    static void addAssociatedExampleCriteria(Criteria criteria, final «javaDomainClass(this.name)» example, final String associationPath,
     final SearchParameters parameters, final Set<Object> addedAssociations) {
     
    «FOREACH getToOneAssociationsToInHierarchy().toSet() AS e -»
        if (example.get«e.targetRoleName.toFirstUpper()»() != null &&!addedAssociations.contains(example.get«e.targetRoleName.toFirstUpper()»())) {
                    
            «javaDomainClass(e.target.name)» associatedExample = example.get«e.targetRoleName.toFirstUpper()»();
            String «e.targetRoleName»Path = associationPath + "«e.targetRoleName»";
            
            if (associatedExample.getId() != null) {
                criteria.add(Restrictions.eq("«e.targetRoleName».id", associatedExample.getId()));
            } else {
                criteria.createCriteria(«e.targetRoleName»Path).add(parameters.createExample(associatedExample));
            }
            addedAssociations.add(associatedExample);
            «IF ((BusinessDomainDsl::BusinessClass)e.target).getAllToOneAssociationsInHierarchy().size > 0»
                «javaDaoBaseClass(e.target.name)».addAssociatedExampleCriteria(criteria, associatedExample, «e.targetRoleName»Path + ".", parameters, addedAssociations);
            «ENDIF -»
        }
    «ENDFOREACH -»
    «FOREACH getToOneAssociationsFromInHierarchy().toSet() AS e -»
        if (example.get«e.sourceRoleName.toFirstUpper()»() != null && !addedAssociations.contains(example.get«e.sourceRoleName.toFirstUpper()»())) {
            
            «javaDomainClass(e.source.name)» associatedExample = example.get«e.sourceRoleName.toFirstUpper()»();
            String «e.sourceRoleName»Path = associationPath + "«e.sourceRoleName»";
            
            if (associatedExample.getId() != null) {
                criteria.add(Restrictions.eq("«e.sourceRoleName».id", associatedExample.getId()));
            } else {
                criteria.createCriteria(«e.sourceRoleName»Path).add(parameters.createExample(associatedExample));
            }
            addedAssociations.add(associatedExample);
            «IF e.source.getAllToOneAssociationsInHierarchy().size > 0»
                «javaDaoBaseClass(e.source.name)».addAssociatedExampleCriteria(criteria, associatedExample, «e.sourceRoleName»Path + ".", parameters, addedAssociations);
            «ENDIF -»
        }
    «ENDFOREACH -»
    }
«ENDIF»
	private static final class «javaDomainClass(this.name)»HibernateCallback implements HibernateCallback {
        
	    private final «javaDomainClass(this.name)» example;
        private final SearchParameters parameters;
        private final boolean rowcount;

        private «javaDomainClass(this.name)»HibernateCallback(«javaDomainClass(this.name)» example, SearchParameters parameters) {
            this.example = example;
            this.parameters = parameters;
            this.rowcount = false;
        }
        
        private «javaDomainClass(this.name)»HibernateCallback(«javaDomainClass(this.name)» example, SearchParameters parameters, boolean rowcount) {
            this.example = example;
            this.parameters = parameters;
            this.rowcount = rowcount;
        }

        public Object doInHibernate(final Session session) throws HibernateException, SQLException {

        	Criteria criteria = session.createCriteria(«javaDomainClass(this.name)».class);
        	if (example.getId() != null) {
        		criteria.add(Restrictions
        				.eq("id", example.getId()));
        	} else {
        		criteria.add(parameters.createExample(example));
        	}
        	if (rowcount) {
        	    criteria.setProjection(Projections.rowCount());
        	} else {
			    criteria = parameters.constrainCriteria(criteria);
			}
«IF getAllToOneAssociationsInHierarchy().toSet().size > 0 -»
            addAssociatedExampleCriteria(criteria, example, "", parameters, new HashSet<Object>());
«ENDIF -»
        	return criteria.list();
        }
    }
}
«ENDDEFINE»