«REM»
 Copyright (c) 2009 Ordina and committers to Mod4j
 All rights reserved. This program and the accompanying materials
 are made available under the terms of the Eclipse Public License v1.0
 which accompanies this distribution, and is available at
 http://www.eclipse.org/legal/epl-v10.html
  Contributors:
     Ordina - initial implementation
«ENDREM»
«IMPORT BusinessDomainDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»

«EXTENSION BusinessRule»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»


«DEFINE BusinessRulesImplBases FOR AbstractType»
«REM»No generation of BusinessRulesExtentionPoints for AbastractTypes«ENDREM»
«ENDDEFINE»

«DEFINE BusinessRuleImplBase (BusinessClass bc) FOR BusinessRule»
    «EXPAND JavaComments::regenerationWarningHeader ("Mod4j BusinessDomainDsl generator: NewBusinessRules.xpt") FOR this»
 
    package «getBusinessRulesPackage()»;
    
    «EXPAND Imports::addImports»
    import «javaDomainClassPath(bc.name)» ;
    
    /**
     * «description»
     *
     * @author Generated by Mod4j
     */
    public abstract class «javaBusinessRuleBaseClass(this.name)» implements Validator {
          
        /**
         * {@inheritDoc}
         */
        @SuppressWarnings("unchecked")
        public boolean supports(Class clazz) {
            return «bc.name».class.isAssignableFrom(clazz);
        }                
    }
«ENDDEFINE»

«DEFINE BusinessRuleExtensionPoint FOR BusinessRule»

    «EXPAND JavaComments::extensionPointHeader ("Mod4j BusinessDomainDsl generator: NewBusinessRules.xpt") FOR this»

    package «getBusinessRulesPackage()»;
            
    import org.springframework.validation.Errors;

    /**
     * «description»
     * 
     */
    public class «javaBusinessRuleClass(this.name)» extends «javaBusinessRuleBaseClass(this.name)» {

        /**
         *  {@inheritDoc} 
         */
        public void validate(Object target, Errors errors) {
            // TODO Implement validation code for business rule «name».
        }

    }   
«ENDDEFINE»

«DEFINE addBusinessRulesValidators FOR BusinessClass»
    «EXPAND addPropertyValidator (this) FOREACH properties.reject(e|e.derived) -»
    «FOREACH businessRules.typeSelect(BusinessRule) AS br -»
        validation.addValidator(new «javaBusinessRuleClass(br.name)»());
    «ENDFOREACH» 
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR Property»
    «IF !nullable -»
        validation.addValidator(new NotNullValidator(«javaDomainClass(bC.name)».class, "«name»"));
    «ENDIF -»
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR IntegerProperty»
    «IF !nullable -»
        validation.addValidator(new NotNullValidator(«javaDomainClass(bC.name)».class, "«name»"));
    «ENDIF -»
    «IF minValue != -2147483648 -»
        validation.addValidator(new MinValueValidator(«javaDomainClass(bC.name)».class, "«name»", «name.toUpperCase()»_MINVALUE));
    «ENDIF -»
    «IF maxValue != 2147483647 -»
        validation.addValidator(new MaxValueValidator(«javaDomainClass(bC.name)».class, "«name»", «name.toUpperCase()»_MAXVALUE));
    «ENDIF -»    
«ENDDEFINE»

«DEFINE addPropertyValidator (BusinessClass bC) FOR StringProperty»
    «IF !nullable -»
        validation.addValidator(new NotNullValidator(«javaDomainClass(bC.name)».class, "«name»"));
    «ENDIF -»
    «IF minLength > -1 -»
        validation.addValidator(new MinLengthValidator(«javaDomainClass(bC.name)».class, "«name»", «name.toUpperCase()»_MINLENGTH));
    «ENDIF -»
    «IF maxLength > -1 -»
        validation.addValidator(new MaxLengthValidator(«javaDomainClass(bC.name)».class, "«name»", «name.toUpperCase()»_MAXLENGTH));
    «ENDIF -»
    «IF regularExpression.length > 0 -»
        validation.addValidator(new RegExpValidator(«javaDomainClass(bC.name)».class, "«name»", «name.toUpperCase()»_REGEXP));
    «ENDIF -»
«ENDDEFINE»
