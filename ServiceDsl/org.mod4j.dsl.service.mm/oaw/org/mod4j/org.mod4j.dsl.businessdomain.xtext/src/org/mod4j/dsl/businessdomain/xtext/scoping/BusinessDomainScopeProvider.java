/*
 * generated by Xtext
 */
package org.mendix.dsl.businessdomain.xtext.scoping;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.ScopedElement;
import org.eclipse.xtext.scoping.impl.SimpleScope;
import org.eclipse.xtext.scoping.*;

import BusinessDomainDsl.AbstractType;
import BusinessDomainDsl.Association;
import BusinessDomainDsl.BoolProperty;
import BusinessDomainDsl.BusinessClass;
import BusinessDomainDsl.BusinessDomainModel;
import BusinessDomainDsl.Property;
import BusinessDomainDsl.UniqueRule;
/**
 * This class contains custom scoping description.
 * 
 * see : http://wiki.eclipse.org/Xtext/Documentation#Scoping
 * on how and when to use it 
 *
 */
public class BusinessDomainScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_BusinessClass_superclass(BusinessClass context, EReference reference)
	{
		List<IScopedElement> scopedElements = new ArrayList<IScopedElement>();
		BusinessDomainModel model = context.getModel();
		for (AbstractType aType : model.getTypes() ) {
			if( aType instanceof BusinessClass ){
				if( aType != context){
					IScopedElement scopedElement = ScopedElement.create(aType.getName() , aType);
					scopedElements.add(scopedElement);
				}
			}
		}
		return new SimpleScope(scopedElements);
	}
	
	int index= 0;
	
	public IScope scope_UniqueRule_properties(UniqueRule context, EReference reference)
	{
		List<IScopedElement> scopedElements = new ArrayList<IScopedElement>();
		BusinessClass cls = context.getBusinessClass();
		for (Property p: cls.getProperties() ) {
			IScopedElement scopedElement = ScopedElement.create(p.getName() , p);
			scopedElements.add(scopedElement);
		}
		return new SimpleScope(scopedElements);
	}
	
	public IScope scope_Association_source
	(Association context, 
			EReference reference)
	{
		return scope_Association_source_and_target(context, reference);
	}
	public IScope scope_Association_target
	(Association context, 
			EReference reference)
	{
		return scope_Association_source_and_target(context, reference);
	}
	
	public IScope scope_Association_source_and_target
	(Association context, 
			EReference reference)
	{
	
		List<IScopedElement> scopedElements = new ArrayList<IScopedElement>();
		BusinessDomainModel model = context.getModel();
		for (AbstractType aType : model.getTypes() ) {
			if( aType instanceof BusinessClass ){
				IScopedElement scopedElement = ScopedElement.create(aType.getName() , aType);
				scopedElements.add(scopedElement);
			}
		}
		return new SimpleScope(scopedElements);
	}

}
