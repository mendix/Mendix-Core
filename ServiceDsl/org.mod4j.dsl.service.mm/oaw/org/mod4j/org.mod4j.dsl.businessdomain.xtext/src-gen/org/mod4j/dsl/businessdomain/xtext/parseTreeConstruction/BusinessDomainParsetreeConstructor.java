/*
* generated by Xtext
*/
package org.mendix.dsl.businessdomain.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mendix.dsl.businessdomain.xtext.services.BusinessDomainGrammarAccess;

import com.google.inject.Inject;

public class BusinessDomainParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private BusinessDomainGrammarAccess grammarAccess;
		
	public BusinessDomainGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessDomainModel_Group(this, this, 0, inst);
			case 1: return new Association_Group(this, this, 1, inst);
			case 2: return new BusinessClass_Group(this, this, 2, inst);
			case 3: return new Enumeration_Group(this, this, 3, inst);
			case 4: return new EnumerationLiteral_Group(this, this, 4, inst);
			case 5: return new AbstractBusinessRule_Alternatives(this, this, 5, inst);
			case 6: return new BusinessRule_Group(this, this, 6, inst);
			case 7: return new UniqueRule_Group(this, this, 7, inst);
			case 8: return new Property_Group(this, this, 8, inst);
			case 9: return new BoolProperty_Group(this, this, 9, inst);
			case 10: return new StringProperty_Group(this, this, 10, inst);
			case 11: return new DateTimeProperty_Group(this, this, 11, inst);
			case 12: return new IntegerProperty_Group(this, this, 12, inst);
			case 13: return new DecimalProperty_Group(this, this, 13, inst);
			case 14: return new EnumerationProperty_Group(this, this, 14, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule BusinessDomainModel ****************
 *
 * BusinessDomainModel:
 *   description=STRING? "domain" name=ID ";" (types+=BusinessClass|enumerations+=
 *   Enumeration|associations+=Association)*; 
 * 
 * / *******************************************************************************
 *  * Copyright (c) 2009 Ordina and committers to Mod4j
 *  * All rights reserved. This program and the accompanying materials
 *  * are made available under the terms of the Eclipse Public License v1.0
 *  * which accompanies this distribution, and is available at
 *  * http://www.eclipse.org/legal/epl-v10.html
 *  *
 *  * Contributors:
 *  *     Ordina - initial implementation
 *  ******************************************************************************* /
 * 
 *   
 * 	  
 * 	        
 * //	(types+= BusinessClassReference)*
 * 	                
 * 	          
 * 	      
 * 	 
 * 	
 * // COMMETNED OUT: import does not work correctly, therefore should not be possible at all.
 * //BusinessClassReference:
 * //    "from" referredModel=ID "import" name=ID  ";" 
 * //    ;
 *
 **/

// description=STRING? "domain" name=ID ";" (types+=BusinessClass|enumerations+=
// Enumeration|associations+=Association)* 
// 	  
// 	        
// //	(types+= BusinessClassReference)*
protected class BusinessDomainModel_Group extends GroupToken {
	
	public BusinessDomainModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessDomainModel_Alternatives_4(parent, this, 0, inst);
			case 1: return new BusinessDomainModel_SemicolonKeyword_3(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBusinessDomainModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class BusinessDomainModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public BusinessDomainModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessDomainModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "domain"
protected class BusinessDomainModel_DomainKeyword_1 extends KeywordToken  {
	
	public BusinessDomainModel_DomainKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getDomainKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessDomainModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class BusinessDomainModel_NameAssignment_2 extends AssignmentToken  {
	
	public BusinessDomainModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessDomainModel_DomainKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessDomainModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"   
// //	(types+= BusinessClassReference)*
protected class BusinessDomainModel_SemicolonKeyword_3 extends KeywordToken  {
	
	public BusinessDomainModel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessDomainModel_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (types+=BusinessClass|enumerations+=Enumeration|associations+=Association)* 
// //	(types+= BusinessClassReference)*
protected class BusinessDomainModel_Alternatives_4 extends AlternativesToken {

	public BusinessDomainModel_Alternatives_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getAlternatives_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessDomainModel_TypesAssignment_4_0(parent, this, 0, inst);
			case 1: return new BusinessDomainModel_EnumerationsAssignment_4_1(parent, this, 1, inst);
			case 2: return new BusinessDomainModel_AssociationsAssignment_4_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// types+=BusinessClass
protected class BusinessDomainModel_TypesAssignment_4_0 extends AssignmentToken  {
	
	public BusinessDomainModel_TypesAssignment_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getTypesAssignment_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("types",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("types");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBusinessClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessDomainModelAccess().getTypesBusinessClassParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessDomainModel_Alternatives_4(parent, next, actIndex, consumed);
			case 1: return new BusinessDomainModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// enumerations+=Enumeration
protected class BusinessDomainModel_EnumerationsAssignment_4_1 extends AssignmentToken  {
	
	public BusinessDomainModel_EnumerationsAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getEnumerationsAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumerations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumerations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessDomainModelAccess().getEnumerationsEnumerationParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessDomainModel_Alternatives_4(parent, next, actIndex, consumed);
			case 1: return new BusinessDomainModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// associations+=Association
protected class BusinessDomainModel_AssociationsAssignment_4_2 extends AssignmentToken  {
	
	public BusinessDomainModel_AssociationsAssignment_4_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessDomainModelAccess().getAssociationsAssignment_4_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("associations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("associations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessDomainModelAccess().getAssociationsAssociationParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessDomainModel_Alternatives_4(parent, next, actIndex, consumed);
			case 1: return new BusinessDomainModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule BusinessDomainModel ****************/


/************ begin Rule Association ****************
 *
 * Association:
 *   description=STRING? "association" source=[BusinessClass] sourceRoleName=ID
 *   sourceMultiplicity=Multiplicity (bidirectional?="<->"|"->") targetMultiplicity=
 *   Multiplicity target=[AbstractBusinessClass] targetRoleName=ID ordered?="ordered"?
 *   ";"; 
 * // COMMETNED OUT: import does not work correctly, therefore should not be possible at all.
 * //BusinessClassReference:
 * //    "from" referredModel=ID "import" name=ID  ";" 
 * //    ;
 *
 **/

// description=STRING? "association" source=[BusinessClass] sourceRoleName=ID
// sourceMultiplicity=Multiplicity (bidirectional?="<->"|"->") targetMultiplicity=
// Multiplicity target=[AbstractBusinessClass] targetRoleName=ID ordered?="ordered"?
// ";"
protected class Association_Group extends GroupToken {
	
	public Association_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssociationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_SemicolonKeyword_10(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class Association_DescriptionAssignment_0 extends AssignmentToken  {
	
	public Association_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "association"
protected class Association_AssociationKeyword_1 extends KeywordToken  {
	
	public Association_AssociationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationAccess().getAssociationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// source=[BusinessClass]
protected class Association_SourceAssignment_2 extends AssignmentToken  {
	
	public Association_SourceAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getSourceAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_AssociationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("source",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("source");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationAccess().getSourceBusinessClassCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssociationAccess().getSourceBusinessClassCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// sourceRoleName=ID
protected class Association_SourceRoleNameAssignment_3 extends AssignmentToken  {
	
	public Association_SourceRoleNameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getSourceRoleNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_SourceAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourceRoleName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourceRoleName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationAccess().getSourceRoleNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// sourceMultiplicity=Multiplicity
protected class Association_SourceMultiplicityAssignment_4 extends AssignmentToken  {
	
	public Association_SourceMultiplicityAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getSourceMultiplicityAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_SourceRoleNameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("sourceMultiplicity",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("sourceMultiplicity");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAssociationAccess().getSourceMultiplicityMultiplicityEnumRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// bidirectional?="<->"|"->"
protected class Association_Alternatives_5 extends AlternativesToken {

	public Association_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAssociationAccess().getAlternatives_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_BidirectionalAssignment_5_0(parent, this, 0, inst);
			case 1: return new Association_HyphenMinusGreaterThanSignKeyword_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// bidirectional?="<->"
protected class Association_BidirectionalAssignment_5_0 extends AssignmentToken  {
	
	public Association_BidirectionalAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getBidirectionalAssignment_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_SourceMultiplicityAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("bidirectional",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("bidirectional");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssociationAccess().getBidirectionalLessThanSignHyphenMinusGreaterThanSignKeyword_5_0_0();
			return obj;
		}
		return null;
	}

}

// "->"
protected class Association_HyphenMinusGreaterThanSignKeyword_5_1 extends KeywordToken  {
	
	public Association_HyphenMinusGreaterThanSignKeyword_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationAccess().getHyphenMinusGreaterThanSignKeyword_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_SourceMultiplicityAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// targetMultiplicity=Multiplicity
protected class Association_TargetMultiplicityAssignment_6 extends AssignmentToken  {
	
	public Association_TargetMultiplicityAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getTargetMultiplicityAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("targetMultiplicity",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("targetMultiplicity");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAssociationAccess().getTargetMultiplicityMultiplicityEnumRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// target=[AbstractBusinessClass]
protected class Association_TargetAssignment_7 extends AssignmentToken  {
	
	public Association_TargetAssignment_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getTargetAssignment_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_TargetMultiplicityAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("target",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("target");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationAccess().getTargetAbstractBusinessClassCrossReference_7_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssociationAccess().getTargetAbstractBusinessClassCrossReference_7_0(); 
				return obj;
			}
		}
		return null;
	}

}

// targetRoleName=ID
protected class Association_TargetRoleNameAssignment_8 extends AssignmentToken  {
	
	public Association_TargetRoleNameAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getTargetRoleNameAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_TargetAssignment_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("targetRoleName",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("targetRoleName");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationAccess().getTargetRoleNameIDTerminalRuleCall_8_0();
			return obj;
		}
		return null;
	}

}

// ordered?="ordered"?
protected class Association_OrderedAssignment_9 extends AssignmentToken  {
	
	public Association_OrderedAssignment_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationAccess().getOrderedAssignment_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_TargetRoleNameAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("ordered",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("ordered");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssociationAccess().getOrderedOrderedKeyword_9_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Association_SemicolonKeyword_10 extends KeywordToken  {
	
	public Association_SemicolonKeyword_10(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationAccess().getSemicolonKeyword_10();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Association_OrderedAssignment_9(parent, this, 0, inst);
			case 1: return new Association_TargetRoleNameAssignment_8(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Association ****************/


/************ begin Rule BusinessClass ****************
 *
 * BusinessClass:
 *   description=STRING? "class" name=ID ("inherits" superclass=[BusinessClass])? "["
 *   properties+=Property* ("rules" "[" businessRules+=AbstractBusinessRule* "]")? "]";
 *
 **/

// description=STRING? "class" name=ID ("inherits" superclass=[BusinessClass])? "["
// properties+=Property* ("rules" "[" businessRules+=AbstractBusinessRule* "]")? "]"
protected class BusinessClass_Group extends GroupToken {
	
	public BusinessClass_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_RightSquareBracketKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBusinessClassRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class BusinessClass_DescriptionAssignment_0 extends AssignmentToken  {
	
	public BusinessClass_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessClassAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "class"
protected class BusinessClass_ClassKeyword_1 extends KeywordToken  {
	
	public BusinessClass_ClassKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getClassKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class BusinessClass_NameAssignment_2 extends AssignmentToken  {
	
	public BusinessClass_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_ClassKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessClassAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("inherits" superclass=[BusinessClass])?
protected class BusinessClass_Group_3 extends GroupToken {
	
	public BusinessClass_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_SuperclassAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "inherits"
protected class BusinessClass_InheritsKeyword_3_0 extends KeywordToken  {
	
	public BusinessClass_InheritsKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getInheritsKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// superclass=[BusinessClass]
protected class BusinessClass_SuperclassAssignment_3_1 extends AssignmentToken  {
	
	public BusinessClass_SuperclassAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getSuperclassAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_InheritsKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("superclass",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("superclass");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBusinessClassAccess().getSuperclassBusinessClassCrossReference_3_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBusinessClassAccess().getSuperclassBusinessClassCrossReference_3_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "["
protected class BusinessClass_LeftSquareBracketKeyword_4 extends KeywordToken  {
	
	public BusinessClass_LeftSquareBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getLeftSquareBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_Group_3(parent, this, 0, inst);
			case 1: return new BusinessClass_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// properties+=Property*
protected class BusinessClass_PropertiesAssignment_5 extends AssignmentToken  {
	
	public BusinessClass_PropertiesAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getPropertiesAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessClassAccess().getPropertiesPropertyParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessClass_PropertiesAssignment_5(parent, next, actIndex, consumed);
			case 1: return new BusinessClass_LeftSquareBracketKeyword_4(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("rules" "[" businessRules+=AbstractBusinessRule* "]")?
protected class BusinessClass_Group_6 extends GroupToken {
	
	public BusinessClass_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_RightSquareBracketKeyword_6_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "rules"
protected class BusinessClass_RulesKeyword_6_0 extends KeywordToken  {
	
	public BusinessClass_RulesKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getRulesKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_PropertiesAssignment_5(parent, this, 0, inst);
			case 1: return new BusinessClass_LeftSquareBracketKeyword_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class BusinessClass_LeftSquareBracketKeyword_6_1 extends KeywordToken  {
	
	public BusinessClass_LeftSquareBracketKeyword_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getLeftSquareBracketKeyword_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_RulesKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// businessRules+=AbstractBusinessRule*
protected class BusinessClass_BusinessRulesAssignment_6_2 extends AssignmentToken  {
	
	public BusinessClass_BusinessRulesAssignment_6_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getBusinessRulesAssignment_6_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBusinessRule_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("businessRules",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("businessRules");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAbstractBusinessRuleRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessClassAccess().getBusinessRulesAbstractBusinessRuleParserRuleCall_6_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessClass_BusinessRulesAssignment_6_2(parent, next, actIndex, consumed);
			case 1: return new BusinessClass_LeftSquareBracketKeyword_6_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class BusinessClass_RightSquareBracketKeyword_6_3 extends KeywordToken  {
	
	public BusinessClass_RightSquareBracketKeyword_6_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getRightSquareBracketKeyword_6_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_BusinessRulesAssignment_6_2(parent, this, 0, inst);
			case 1: return new BusinessClass_LeftSquareBracketKeyword_6_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class BusinessClass_RightSquareBracketKeyword_7 extends KeywordToken  {
	
	public BusinessClass_RightSquareBracketKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAccess().getRightSquareBracketKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClass_Group_6(parent, this, 0, inst);
			case 1: return new BusinessClass_PropertiesAssignment_5(parent, this, 1, inst);
			case 2: return new BusinessClass_LeftSquareBracketKeyword_4(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BusinessClass ****************/


/************ begin Rule Enumeration ****************
 *
 * Enumeration:
 *   description=STRING? "enumeration" name=ID "[" enumerationLiterals+=
 *   EnumerationLiteral+ "]";
 *
 **/

// description=STRING? "enumeration" name=ID "[" enumerationLiterals+=
// EnumerationLiteral+ "]"
protected class Enumeration_Group extends GroupToken {
	
	public Enumeration_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_RightSquareBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class Enumeration_DescriptionAssignment_0 extends AssignmentToken  {
	
	public Enumeration_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "enumeration"
protected class Enumeration_EnumerationKeyword_1 extends KeywordToken  {
	
	public Enumeration_EnumerationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEnumerationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class Enumeration_NameAssignment_2 extends AssignmentToken  {
	
	public Enumeration_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_EnumerationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class Enumeration_LeftSquareBracketKeyword_3 extends KeywordToken  {
	
	public Enumeration_LeftSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getLeftSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// enumerationLiterals+=EnumerationLiteral+
protected class Enumeration_EnumerationLiteralsAssignment_4 extends AssignmentToken  {
	
	public Enumeration_EnumerationLiteralsAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getEnumerationLiteralsAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumerationLiterals",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumerationLiterals");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getEnumerationAccess().getEnumerationLiteralsEnumerationLiteralParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Enumeration_EnumerationLiteralsAssignment_4(parent, next, actIndex, consumed);
			case 1: return new Enumeration_LeftSquareBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class Enumeration_RightSquareBracketKeyword_5 extends KeywordToken  {
	
	public Enumeration_RightSquareBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationAccess().getRightSquareBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Enumeration_EnumerationLiteralsAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Enumeration ****************/


/************ begin Rule EnumerationLiteral ****************
 *
 * EnumerationLiteral:
 *   name=ID ("=" persistedValue=INT) ";";
 *
 **/

// name=ID ("=" persistedValue=INT) ";"
protected class EnumerationLiteral_Group extends GroupToken {
	
	public EnumerationLiteral_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class EnumerationLiteral_NameAssignment_0 extends AssignmentToken  {
	
	public EnumerationLiteral_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationLiteralAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "=" persistedValue=INT
protected class EnumerationLiteral_Group_1 extends GroupToken {
	
	public EnumerationLiteral_Group_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getGroup_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_PersistedValueAssignment_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class EnumerationLiteral_EqualsSignKeyword_1_0 extends KeywordToken  {
	
	public EnumerationLiteral_EqualsSignKeyword_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getEqualsSignKeyword_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// persistedValue=INT
protected class EnumerationLiteral_PersistedValueAssignment_1_1 extends AssignmentToken  {
	
	public EnumerationLiteral_PersistedValueAssignment_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getPersistedValueAssignment_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_EqualsSignKeyword_1_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("persistedValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("persistedValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationLiteralAccess().getPersistedValueINTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}


// ";"
protected class EnumerationLiteral_SemicolonKeyword_2 extends KeywordToken  {
	
	public EnumerationLiteral_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationLiteralAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationLiteral_Group_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule EnumerationLiteral ****************/


/************ begin Rule AbstractBusinessRule ****************
 *
 * AbstractBusinessRule:
 *   BusinessRule|UniqueRule;
 *
 **/

// BusinessRule|UniqueRule
protected class AbstractBusinessRule_Alternatives extends AlternativesToken {

	public AbstractBusinessRule_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getAbstractBusinessRuleAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AbstractBusinessRule_BusinessRuleParserRuleCall_0(parent, this, 0, inst);
			case 1: return new AbstractBusinessRule_UniqueRuleParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAbstractBusinessRuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BusinessRule
protected class AbstractBusinessRule_BusinessRuleParserRuleCall_0 extends RuleCallToken {
	
	public AbstractBusinessRule_BusinessRuleParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractBusinessRuleAccess().getBusinessRuleParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BusinessRule_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBusinessRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// UniqueRule
protected class AbstractBusinessRule_UniqueRuleParserRuleCall_1 extends RuleCallToken {
	
	public AbstractBusinessRule_UniqueRuleParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getAbstractBusinessRuleAccess().getUniqueRuleParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(UniqueRule_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getUniqueRuleRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AbstractBusinessRule ****************/


/************ begin Rule BusinessRule ****************
 *
 * BusinessRule:
 *   description=STRING? name=ID ";";
 *
 **/

// description=STRING? name=ID ";"
protected class BusinessRule_Group extends GroupToken {
	
	public BusinessRule_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessRuleAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessRule_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBusinessRuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class BusinessRule_DescriptionAssignment_0 extends AssignmentToken  {
	
	public BusinessRule_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessRuleAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessRuleAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class BusinessRule_NameAssignment_1 extends AssignmentToken  {
	
	public BusinessRule_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessRuleAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessRule_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessRuleAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class BusinessRule_SemicolonKeyword_2 extends KeywordToken  {
	
	public BusinessRule_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessRuleAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessRule_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BusinessRule ****************/


/************ begin Rule UniqueRule ****************
 *
 * UniqueRule:
 *   description=STRING? "unique" name=ID "[" properties+=[Property] ("," properties+=[
 *   Property])* "]";
 *
 **/

// description=STRING? "unique" name=ID "[" properties+=[Property] ("," properties+=[
// Property])* "]"
protected class UniqueRule_Group extends GroupToken {
	
	public UniqueRule_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_RightSquareBracketKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getUniqueRuleRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class UniqueRule_DescriptionAssignment_0 extends AssignmentToken  {
	
	public UniqueRule_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getUniqueRuleAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "unique"
protected class UniqueRule_UniqueKeyword_1 extends KeywordToken  {
	
	public UniqueRule_UniqueKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getUniqueKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class UniqueRule_NameAssignment_2 extends AssignmentToken  {
	
	public UniqueRule_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_UniqueKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getUniqueRuleAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class UniqueRule_LeftSquareBracketKeyword_3 extends KeywordToken  {
	
	public UniqueRule_LeftSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getLeftSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties+=[Property]
protected class UniqueRule_PropertiesAssignment_4 extends AssignmentToken  {
	
	public UniqueRule_PropertiesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getPropertiesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_LeftSquareBracketKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUniqueRuleAccess().getPropertiesPropertyCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getUniqueRuleAccess().getPropertiesPropertyCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," properties+=[Property])*
protected class UniqueRule_Group_5 extends GroupToken {
	
	public UniqueRule_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_PropertiesAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class UniqueRule_CommaKeyword_5_0 extends KeywordToken  {
	
	public UniqueRule_CommaKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getCommaKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_Group_5(parent, this, 0, inst);
			case 1: return new UniqueRule_PropertiesAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// properties+=[Property]
protected class UniqueRule_PropertiesAssignment_5_1 extends AssignmentToken  {
	
	public UniqueRule_PropertiesAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getPropertiesAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_CommaKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUniqueRuleAccess().getPropertiesPropertyCrossReference_5_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getUniqueRuleAccess().getPropertiesPropertyCrossReference_5_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// "]"
protected class UniqueRule_RightSquareBracketKeyword_6 extends KeywordToken  {
	
	public UniqueRule_RightSquareBracketKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getUniqueRuleAccess().getRightSquareBracketKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new UniqueRule_Group_5(parent, this, 0, inst);
			case 1: return new UniqueRule_PropertiesAssignment_4(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule UniqueRule ****************/


/************ begin Rule Property ****************
 *
 * Property:
 *   (BoolProperty|StringProperty|DateTimeProperty|IntegerProperty|DecimalProperty|
 *   EnumerationProperty) nullable?="nullable"? (derived?="derived" writable?="writable"
 *   ?)? ";"; 
 * 
 * 
 *                   
 * 	      
 * 	
 * 	  
 * //	("persistency" persistency=PersistencyMode)?
 *
 **/

// (BoolProperty|StringProperty|DateTimeProperty|IntegerProperty|DecimalProperty|
// EnumerationProperty) nullable?="nullable"? (derived?="derived" writable?="writable"
// ?)? ";" 
//                   
// 	      
// 	
// 	  
// //	("persistency" persistency=PersistencyMode)?
protected class Property_Group extends GroupToken {
	
	public Property_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BoolProperty|StringProperty|DateTimeProperty|IntegerProperty|DecimalProperty|
// EnumerationProperty
protected class Property_Alternatives_0 extends AlternativesToken {

	public Property_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getPropertyAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_BoolPropertyParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new Property_StringPropertyParserRuleCall_0_1(parent, this, 1, inst);
			case 2: return new Property_DateTimePropertyParserRuleCall_0_2(parent, this, 2, inst);
			case 3: return new Property_IntegerPropertyParserRuleCall_0_3(parent, this, 3, inst);
			case 4: return new Property_DecimalPropertyParserRuleCall_0_4(parent, this, 4, inst);
			case 5: return new Property_EnumerationPropertyParserRuleCall_0_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// BoolProperty
protected class Property_BoolPropertyParserRuleCall_0_0 extends RuleCallToken {
	
	public Property_BoolPropertyParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getBoolPropertyParserRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BoolProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBoolPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// StringProperty
protected class Property_StringPropertyParserRuleCall_0_1 extends RuleCallToken {
	
	public Property_StringPropertyParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getStringPropertyParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(StringProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getStringPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DateTimeProperty
protected class Property_DateTimePropertyParserRuleCall_0_2 extends RuleCallToken {
	
	public Property_DateTimePropertyParserRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getDateTimePropertyParserRuleCall_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DateTimeProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDateTimePropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// IntegerProperty
protected class Property_IntegerPropertyParserRuleCall_0_3 extends RuleCallToken {
	
	public Property_IntegerPropertyParserRuleCall_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getIntegerPropertyParserRuleCall_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(IntegerProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getIntegerPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DecimalProperty
protected class Property_DecimalPropertyParserRuleCall_0_4 extends RuleCallToken {
	
	public Property_DecimalPropertyParserRuleCall_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getDecimalPropertyParserRuleCall_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DecimalProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DecimalProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDecimalPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// EnumerationProperty
protected class Property_EnumerationPropertyParserRuleCall_0_5 extends RuleCallToken {
	
	public Property_EnumerationPropertyParserRuleCall_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getPropertyAccess().getEnumerationPropertyParserRuleCall_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(EnumerationProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getEnumerationPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


// nullable?="nullable"?
protected class Property_NullableAssignment_1 extends AssignmentToken  {
	
	public Property_NullableAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getNullableAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("nullable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("nullable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyAccess().getNullableNullableKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// (derived?="derived" writable?="writable"?)?
protected class Property_Group_2 extends GroupToken {
	
	public Property_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPropertyAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_WritableAssignment_2_1(parent, this, 0, inst);
			case 1: return new Property_DerivedAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// derived?="derived"
protected class Property_DerivedAssignment_2_0 extends AssignmentToken  {
	
	public Property_DerivedAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getDerivedAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_NullableAssignment_1(parent, this, 0, inst);
			case 1: return new Property_Alternatives_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("derived",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("derived");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyAccess().getDerivedDerivedKeyword_2_0_0();
			return obj;
		}
		return null;
	}

}

// writable?="writable"?
protected class Property_WritableAssignment_2_1 extends AssignmentToken  {
	
	public Property_WritableAssignment_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPropertyAccess().getWritableAssignment_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_DerivedAssignment_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("writable",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("writable");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getPropertyAccess().getWritableWritableKeyword_2_1_0();
			return obj;
		}
		return null;
	}

}


// ";" 
// //	("persistency" persistency=PersistencyMode)?
protected class Property_SemicolonKeyword_3 extends KeywordToken  {
	
	public Property_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPropertyAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Property_Group_2(parent, this, 0, inst);
			case 1: return new Property_NullableAssignment_1(parent, this, 1, inst);
			case 2: return new Property_Alternatives_0(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Property ****************/


/************ begin Rule BoolProperty ****************
 *
 * BoolProperty:
 *   description=STRING? dataType="boolean" name=ID (hasDefault?="default" (defaultValue
 *   ?="true"|"false"))?;
 *
 **/

// description=STRING? dataType="boolean" name=ID (hasDefault?="default" (defaultValue
// ?="true"|"false"))?
protected class BoolProperty_Group extends GroupToken {
	
	public BoolProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_Group_3(parent, this, 0, inst);
			case 1: return new BoolProperty_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBoolPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class BoolProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public BoolProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBoolPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="boolean"
protected class BoolProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public BoolProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("boolean".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBoolPropertyAccess().getDataTypeBooleanKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class BoolProperty_NameAssignment_2 extends AssignmentToken  {
	
	public BoolProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBoolPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (hasDefault?="default" (defaultValue?="true"|"false"))?
protected class BoolProperty_Group_3 extends GroupToken {
	
	public BoolProperty_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_Alternatives_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// hasDefault?="default"
protected class BoolProperty_HasDefaultAssignment_3_0 extends AssignmentToken  {
	
	public BoolProperty_HasDefaultAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getHasDefaultAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasDefault",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasDefault");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBoolPropertyAccess().getHasDefaultDefaultKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// defaultValue?="true"|"false"
protected class BoolProperty_Alternatives_3_1 extends AlternativesToken {

	public BoolProperty_Alternatives_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getAlternatives_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_DefaultValueAssignment_3_1_0(parent, this, 0, inst);
			case 1: return new BoolProperty_FalseKeyword_3_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// defaultValue?="true"
protected class BoolProperty_DefaultValueAssignment_3_1_0 extends AssignmentToken  {
	
	public BoolProperty_DefaultValueAssignment_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getDefaultValueAssignment_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_HasDefaultAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValue");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBoolPropertyAccess().getDefaultValueTrueKeyword_3_1_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class BoolProperty_FalseKeyword_3_1_1 extends KeywordToken  {
	
	public BoolProperty_FalseKeyword_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBoolPropertyAccess().getFalseKeyword_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BoolProperty_HasDefaultAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule BoolProperty ****************/


/************ begin Rule StringProperty ****************
 *
 * StringProperty:
 *   description=STRING? dataType="string" name=ID (hasDefault?="default" defaultValue=
 *   STRING)? ("minlength" minLength=INT)? ("maxlength" maxLength=INT)? ("regexp"
 *   regularExpression=STRING)?;
 *
 **/

// description=STRING? dataType="string" name=ID (hasDefault?="default" defaultValue=
// STRING)? ("minlength" minLength=INT)? ("maxlength" maxLength=INT)? ("regexp"
// regularExpression=STRING)?
protected class StringProperty_Group extends GroupToken {
	
	public StringProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_6(parent, this, 0, inst);
			case 1: return new StringProperty_Group_5(parent, this, 1, inst);
			case 2: return new StringProperty_Group_4(parent, this, 2, inst);
			case 3: return new StringProperty_Group_3(parent, this, 3, inst);
			case 4: return new StringProperty_NameAssignment_2(parent, this, 4, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStringPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class StringProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public StringProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="string"
protected class StringProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public StringProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("string".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStringPropertyAccess().getDataTypeStringKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class StringProperty_NameAssignment_2 extends AssignmentToken  {
	
	public StringProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (hasDefault?="default" defaultValue=STRING)?
protected class StringProperty_Group_3 extends GroupToken {
	
	public StringProperty_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_DefaultValueAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// hasDefault?="default"
protected class StringProperty_HasDefaultAssignment_3_0 extends AssignmentToken  {
	
	public StringProperty_HasDefaultAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getHasDefaultAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasDefault",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasDefault");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getStringPropertyAccess().getHasDefaultDefaultKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// defaultValue=STRING
protected class StringProperty_DefaultValueAssignment_3_1 extends AssignmentToken  {
	
	public StringProperty_DefaultValueAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getDefaultValueAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_HasDefaultAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringPropertyAccess().getDefaultValueSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("minlength" minLength=INT)?
protected class StringProperty_Group_4 extends GroupToken {
	
	public StringProperty_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_MinLengthAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "minlength"
protected class StringProperty_MinlengthKeyword_4_0 extends KeywordToken  {
	
	public StringProperty_MinlengthKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getMinlengthKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_3(parent, this, 0, inst);
			case 1: return new StringProperty_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// minLength=INT
protected class StringProperty_MinLengthAssignment_4_1 extends AssignmentToken  {
	
	public StringProperty_MinLengthAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getMinLengthAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_MinlengthKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minLength",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minLength");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringPropertyAccess().getMinLengthINTTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ("maxlength" maxLength=INT)?
protected class StringProperty_Group_5 extends GroupToken {
	
	public StringProperty_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_MaxLengthAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "maxlength"
protected class StringProperty_MaxlengthKeyword_5_0 extends KeywordToken  {
	
	public StringProperty_MaxlengthKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getMaxlengthKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_4(parent, this, 0, inst);
			case 1: return new StringProperty_Group_3(parent, this, 1, inst);
			case 2: return new StringProperty_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// maxLength=INT
protected class StringProperty_MaxLengthAssignment_5_1 extends AssignmentToken  {
	
	public StringProperty_MaxLengthAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getMaxLengthAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_MaxlengthKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxLength",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxLength");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringPropertyAccess().getMaxLengthINTTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}


// ("regexp" regularExpression=STRING)?
protected class StringProperty_Group_6 extends GroupToken {
	
	public StringProperty_Group_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getGroup_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_RegularExpressionAssignment_6_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "regexp"
protected class StringProperty_RegexpKeyword_6_0 extends KeywordToken  {
	
	public StringProperty_RegexpKeyword_6_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getRegexpKeyword_6_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_Group_5(parent, this, 0, inst);
			case 1: return new StringProperty_Group_4(parent, this, 1, inst);
			case 2: return new StringProperty_Group_3(parent, this, 2, inst);
			case 3: return new StringProperty_NameAssignment_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
}

// regularExpression=STRING
protected class StringProperty_RegularExpressionAssignment_6_1 extends AssignmentToken  {
	
	public StringProperty_RegularExpressionAssignment_6_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStringPropertyAccess().getRegularExpressionAssignment_6_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new StringProperty_RegexpKeyword_6_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("regularExpression",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("regularExpression");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStringPropertyAccess().getRegularExpressionSTRINGTerminalRuleCall_6_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule StringProperty ****************/


/************ begin Rule DateTimeProperty ****************
 *
 * DateTimeProperty:
 *   description=STRING? dataType="datetime" name=ID (hasDefault?="default" defaultValue=
 *   STRING)?; 
 * 
 * 
 *     
 *     
 * //    accuracy=DateTimeAccuracy
 *
 **/

// description=STRING? dataType="datetime" name=ID (hasDefault?="default" defaultValue=
// STRING)? 
//     
//     
// //    accuracy=DateTimeAccuracy
protected class DateTimeProperty_Group extends GroupToken {
	
	public DateTimeProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_Group_3(parent, this, 0, inst);
			case 1: return new DateTimeProperty_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDateTimePropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DateTimeProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DateTimeProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDateTimePropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="datetime" 
//     
// //    accuracy=DateTimeAccuracy
protected class DateTimeProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DateTimeProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("datetime".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDateTimePropertyAccess().getDataTypeDatetimeKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID 
// //    accuracy=DateTimeAccuracy
protected class DateTimeProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DateTimeProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDateTimePropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (hasDefault?="default" defaultValue=STRING)?
protected class DateTimeProperty_Group_3 extends GroupToken {
	
	public DateTimeProperty_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_DefaultValueAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// hasDefault?="default"
protected class DateTimeProperty_HasDefaultAssignment_3_0 extends AssignmentToken  {
	
	public DateTimeProperty_HasDefaultAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getHasDefaultAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasDefault",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasDefault");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDateTimePropertyAccess().getHasDefaultDefaultKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// defaultValue=STRING
protected class DateTimeProperty_DefaultValueAssignment_3_1 extends AssignmentToken  {
	
	public DateTimeProperty_DefaultValueAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDateTimePropertyAccess().getDefaultValueAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DateTimeProperty_HasDefaultAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDateTimePropertyAccess().getDefaultValueSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule DateTimeProperty ****************/


/************ begin Rule IntegerProperty ****************
 *
 * IntegerProperty:
 *   description=STRING? dataType="integer" name=ID (hasDefault?="default" defaultValue=
 *   INT)? ("min" minValue=INT)? ("max" maxValue=INT)?;
 *
 **/

// description=STRING? dataType="integer" name=ID (hasDefault?="default" defaultValue=
// INT)? ("min" minValue=INT)? ("max" maxValue=INT)?
protected class IntegerProperty_Group extends GroupToken {
	
	public IntegerProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_Group_5(parent, this, 0, inst);
			case 1: return new IntegerProperty_Group_4(parent, this, 1, inst);
			case 2: return new IntegerProperty_Group_3(parent, this, 2, inst);
			case 3: return new IntegerProperty_NameAssignment_2(parent, this, 3, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getIntegerPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class IntegerProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public IntegerProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="integer"
protected class IntegerProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public IntegerProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("integer".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getIntegerPropertyAccess().getDataTypeIntegerKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class IntegerProperty_NameAssignment_2 extends AssignmentToken  {
	
	public IntegerProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (hasDefault?="default" defaultValue=INT)?
protected class IntegerProperty_Group_3 extends GroupToken {
	
	public IntegerProperty_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_DefaultValueAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// hasDefault?="default"
protected class IntegerProperty_HasDefaultAssignment_3_0 extends AssignmentToken  {
	
	public IntegerProperty_HasDefaultAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getHasDefaultAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasDefault",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasDefault");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getIntegerPropertyAccess().getHasDefaultDefaultKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// defaultValue=INT
protected class IntegerProperty_DefaultValueAssignment_3_1 extends AssignmentToken  {
	
	public IntegerProperty_DefaultValueAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getDefaultValueAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_HasDefaultAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValue",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerPropertyAccess().getDefaultValueINTTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}


// ("min" minValue=INT)?
protected class IntegerProperty_Group_4 extends GroupToken {
	
	public IntegerProperty_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_MinValueAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "min"
protected class IntegerProperty_MinKeyword_4_0 extends KeywordToken  {
	
	public IntegerProperty_MinKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getMinKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_Group_3(parent, this, 0, inst);
			case 1: return new IntegerProperty_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// minValue=INT
protected class IntegerProperty_MinValueAssignment_4_1 extends AssignmentToken  {
	
	public IntegerProperty_MinValueAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getMinValueAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_MinKeyword_4_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("minValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("minValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerPropertyAccess().getMinValueINTTerminalRuleCall_4_1_0();
			return obj;
		}
		return null;
	}

}


// ("max" maxValue=INT)?
protected class IntegerProperty_Group_5 extends GroupToken {
	
	public IntegerProperty_Group_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getGroup_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_MaxValueAssignment_5_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "max"
protected class IntegerProperty_MaxKeyword_5_0 extends KeywordToken  {
	
	public IntegerProperty_MaxKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getMaxKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_Group_4(parent, this, 0, inst);
			case 1: return new IntegerProperty_Group_3(parent, this, 1, inst);
			case 2: return new IntegerProperty_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}

// maxValue=INT
protected class IntegerProperty_MaxValueAssignment_5_1 extends AssignmentToken  {
	
	public IntegerProperty_MaxValueAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getIntegerPropertyAccess().getMaxValueAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new IntegerProperty_MaxKeyword_5_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("maxValue",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("maxValue");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getIntegerPropertyAccess().getMaxValueINTTerminalRuleCall_5_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule IntegerProperty ****************/


/************ begin Rule DecimalProperty ****************
 *
 * DecimalProperty:
 *   description=STRING? dataType="decimal" name=ID; 
 * 
 * 
 *     
 *       
 * //                 (hasDefault?="default" defaultValue=INT)?
 * //               ("min" minValue=INT)? ("max" maxValue=INT)?
 *
 **/

// description=STRING? dataType="decimal" name=ID 
//     
//       
// //                 (hasDefault?="default" defaultValue=INT)?
// //               ("min" minValue=INT)? ("max" maxValue=INT)?
protected class DecimalProperty_Group extends GroupToken {
	
	public DecimalProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDecimalPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DecimalProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDecimalPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DecimalProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DecimalProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDecimalPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDecimalPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="decimal"
protected class DecimalProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DecimalProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDecimalPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DecimalProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("decimal".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDecimalPropertyAccess().getDataTypeDecimalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID   
// //                 (hasDefault?="default" defaultValue=INT)?
// //               ("min" minValue=INT)? ("max" maxValue=INT)?
protected class DecimalProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DecimalProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDecimalPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DecimalProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDecimalPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DecimalProperty ****************/


/************ begin Rule EnumerationProperty ****************
 *
 * EnumerationProperty:
 *   description=STRING? type=[Enumeration] name=ID (hasDefault?="default"
 *   defaultValueAsString=ID)?;
 *
 **/

// description=STRING? type=[Enumeration] name=ID (hasDefault?="default"
// defaultValueAsString=ID)?
protected class EnumerationProperty_Group extends GroupToken {
	
	public EnumerationProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_Group_3(parent, this, 0, inst);
			case 1: return new EnumerationProperty_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class EnumerationProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public EnumerationProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=[Enumeration]
protected class EnumerationProperty_TypeAssignment_1 extends AssignmentToken  {
	
	public EnumerationProperty_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationPropertyAccess().getTypeEnumerationCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEnumerationPropertyAccess().getTypeEnumerationCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// name=ID
protected class EnumerationProperty_NameAssignment_2 extends AssignmentToken  {
	
	public EnumerationProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// (hasDefault?="default" defaultValueAsString=ID)?
protected class EnumerationProperty_Group_3 extends GroupToken {
	
	public EnumerationProperty_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_DefaultValueAsStringAssignment_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// hasDefault?="default"
protected class EnumerationProperty_HasDefaultAssignment_3_0 extends AssignmentToken  {
	
	public EnumerationProperty_HasDefaultAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getHasDefaultAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("hasDefault",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("hasDefault");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getEnumerationPropertyAccess().getHasDefaultDefaultKeyword_3_0_0();
			return obj;
		}
		return null;
	}

}

// defaultValueAsString=ID
protected class EnumerationProperty_DefaultValueAsStringAssignment_3_1 extends AssignmentToken  {
	
	public EnumerationProperty_DefaultValueAsStringAssignment_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationPropertyAccess().getDefaultValueAsStringAssignment_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationProperty_HasDefaultAssignment_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("defaultValueAsString",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("defaultValueAsString");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationPropertyAccess().getDefaultValueAsStringIDTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule EnumerationProperty ****************/

}
