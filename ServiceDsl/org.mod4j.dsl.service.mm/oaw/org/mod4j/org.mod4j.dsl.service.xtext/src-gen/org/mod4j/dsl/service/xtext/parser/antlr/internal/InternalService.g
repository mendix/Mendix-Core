/*
* generated by Xtext
*/
grammar InternalService;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.mod4j.dsl.service.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mod4j.dsl.service.xtext.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.mod4j.dsl.service.xtext.services.ServiceGrammarAccess;

}

@parser::members {
 
 	private ServiceGrammarAccess grammarAccess;
 	
    public InternalServiceParser(TokenStream input, IAstFactory factory, ServiceGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/mod4j/dsl/service/xtext/parser/antlr/internal/InternalService.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ServiceModel";	
   	} 
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleServiceModel
entryRuleServiceModel returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getServiceModelRule(), currentNode); }
	 iv_ruleServiceModel=ruleServiceModel 
	 { $current=$iv_ruleServiceModel.current; } 
	 EOF 
;

// Rule ServiceModel
ruleServiceModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getServiceModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'service' 
    {
        createLeafNode(grammarAccess.getServiceModelAccess().getServiceKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getServiceModelAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getServiceModelAccess().getSemicolonKeyword_3(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getServiceModelAccess().getDtoReferencesDtoReferenceParserRuleCall_4_0(), currentNode); 
	    }
	    lv_dtoReferences_4=ruleDtoReference 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "dtoReferences", lv_dtoReferences_4, "DtoReference", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)*((	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getServiceModelAccess().getCrudServicesCrudServiceParserRuleCall_5_0_0(), currentNode); 
	    }
	    lv_crudServices_5=ruleCrudService 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "crudServices", lv_crudServices_5, "CrudService", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)
    |(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getServiceModelAccess().getMethodsServiceMethodParserRuleCall_5_1_0(), currentNode); 
	    }
	    lv_methods_6=ruleServiceMethod 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getServiceModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "methods", lv_methods_6, "ServiceMethod", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*);





// Entry rule entryRuleAssociationMethod
entryRuleAssociationMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getAssociationMethodRule(), currentNode); }
	 iv_ruleAssociationMethod=ruleAssociationMethod 
	 { $current=$iv_ruleAssociationMethod.current; } 
	 EOF 
;

// Rule AssociationMethod
ruleAssociationMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getAssociationMethodAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    lv_name_1='for' 
    {
        createLeafNode(grammarAccess.getAssociationMethodAccess().getNameForKeyword_1_0(), "name"); 
    }

 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", /* lv_name_1 */ input.LT(-1), "for", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationMethodAccess().getMainDtoReferenceCrossReference_2_0(), "main"); 
	}

		// TODO assign feature to currentNode
	
)'reference' 
    {
        createLeafNode(grammarAccess.getAssociationMethodAccess().getReferenceKeyword_3(), null); 
    }
(	
	
	    lv_rolename_4=	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationMethodAccess().getRolenameIDTerminalRuleCall_4_0(), "rolename"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "rolename", lv_rolename_4, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getAssociationMethodAccess().getTypeAssociationMethodTypeEnumRuleCall_5_0(), currentNode); 
	    }
	    lv_type_5=ruleAssociationMethodType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_5, "AssociationMethodType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getAssociationMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getAssociationMethodAccess().getPartDtoReferenceCrossReference_6_0(), "part"); 
	}

		// TODO assign feature to currentNode
	
)';' 
    {
        createLeafNode(grammarAccess.getAssociationMethodAccess().getSemicolonKeyword_7(), null); 
    }
);





// Entry rule entryRuleDtoReference
entryRuleDtoReference returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getDtoReferenceRule(), currentNode); }
	 iv_ruleDtoReference=ruleDtoReference 
	 { $current=$iv_ruleDtoReference.current; } 
	 EOF 
;

// Rule DtoReference
ruleDtoReference returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
('from' 
    {
        createLeafNode(grammarAccess.getDtoReferenceAccess().getFromKeyword_0(), null); 
    }
(	
	
	    lv_modelname_1=	RULE_ID
	{
		createLeafNode(grammarAccess.getDtoReferenceAccess().getModelnameIDTerminalRuleCall_1_0(), "modelname"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDtoReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "modelname", lv_modelname_1, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'import' 
    {
        createLeafNode(grammarAccess.getDtoReferenceAccess().getImportKeyword_2(), null); 
    }
(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getDtoReferenceAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDtoReferenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)';' 
    {
        createLeafNode(grammarAccess.getDtoReferenceAccess().getSemicolonKeyword_4(), null); 
    }
);





// Entry rule entryRuleServiceMethod
entryRuleServiceMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getServiceMethodRule(), currentNode); }
	 iv_ruleServiceMethod=ruleServiceMethod 
	 { $current=$iv_ruleServiceMethod.current; } 
	 EOF 
;

// Rule ServiceMethod
ruleServiceMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getServiceMethodAccess().getCustomMethodParserRuleCall_0(), currentNode); 
    }
    this_CustomMethod_0=ruleCustomMethod
    { 
        $current = $this_CustomMethod_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getServiceMethodAccess().getSpecialMethodParserRuleCall_1(), currentNode); 
    }
    this_SpecialMethod_1=ruleSpecialMethod
    { 
        $current = $this_SpecialMethod_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getServiceMethodAccess().getAssociationMethodParserRuleCall_2(), currentNode); 
    }
    this_AssociationMethod_2=ruleAssociationMethod
    { 
        $current = $this_AssociationMethod_2.current; 
        currentNode = currentNode.getParent();
    }
);





// Entry rule entryRuleCustomMethod
entryRuleCustomMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCustomMethodRule(), currentNode); }
	 iv_ruleCustomMethod=ruleCustomMethod 
	 { $current=$iv_ruleCustomMethod.current; } 
	 EOF 
;

// Rule CustomMethod
ruleCustomMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCustomMethodAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCustomMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'method' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getMethodKeyword_1(), null); 
    }
(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getCustomMethodAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCustomMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)('in' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getInKeyword_3_0(), null); 
    }
'(' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getLeftParenthesisKeyword_3_1(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCustomMethodAccess().getInParametersParameterParserRuleCall_3_2_0(), currentNode); 
	    }
	    lv_inParameters_5=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCustomMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "inParameters", lv_inParameters_5, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(',' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getCommaKeyword_3_3_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCustomMethodAccess().getInParametersParameterParserRuleCall_3_3_1_0(), currentNode); 
	    }
	    lv_inParameters_7=ruleParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCustomMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		add($current, "inParameters", lv_inParameters_7, "Parameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))*')' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getRightParenthesisKeyword_3_4(), null); 
    }
)?('out' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getOutKeyword_4_0(), null); 
    }
(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getCustomMethodAccess().getOutParameterOutParameterParserRuleCall_4_1_0(), currentNode); 
	    }
	    lv_outParameter_10=ruleOutParameter 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCustomMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "outParameter", lv_outParameter_10, "OutParameter", currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
))?';' 
    {
        createLeafNode(grammarAccess.getCustomMethodAccess().getSemicolonKeyword_5(), null); 
    }
);





// Entry rule entryRuleOutParameter
entryRuleOutParameter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getOutParameterRule(), currentNode); }
	 iv_ruleOutParameter=ruleOutParameter 
	 { $current=$iv_ruleOutParameter.current; } 
	 EOF 
;

// Rule OutParameter
ruleOutParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getOutParameterAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getOutParameterAccess().getCollectionCollectionTypeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_collection_1=ruleCollectionType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "collection", lv_collection_1, "CollectionType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getOutParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getOutParameterAccess().getTypeDtoReferenceCrossReference_2_0(), "type"); 
	}

		// TODO assign feature to currentNode
	
));





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getParameterRule(), currentNode); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getParameterAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getParameterAccess().getCollectionCollectionTypeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_collection_1=ruleCollectionType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "collection", lv_collection_1, "CollectionType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)?(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterAccess().getTypeDtoReferenceCrossReference_2_0(), "type"); 
	}

		// TODO assign feature to currentNode
	
)(	
	
	    lv_name_3=	RULE_ID
	{
		createLeafNode(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_3_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_3, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
));





// Entry rule entryRuleSpecialMethod
entryRuleSpecialMethod returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getSpecialMethodRule(), currentNode); }
	 iv_ruleSpecialMethod=ruleSpecialMethod 
	 { $current=$iv_ruleSpecialMethod.current; } 
	 EOF 
;

// Rule SpecialMethod
ruleSpecialMethod returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getSpecialMethodAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecialMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?(	
	
	    
	    { 
	        currentNode=createCompositeNode(grammarAccess.getSpecialMethodAccess().getTypeSpecialMethodTypeEnumRuleCall_1_0(), currentNode); 
	    }
	    lv_type_1=ruleSpecialMethodType 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecialMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        
	        try {
	       		set($current, "type", lv_type_1, "SpecialMethodType", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }
	
)(	
	
	    lv_name_2=	RULE_ID
	{
		createLeafNode(grammarAccess.getSpecialMethodAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecialMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_2, "ID", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)'for' 
    {
        createLeafNode(grammarAccess.getSpecialMethodAccess().getForKeyword_3(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSpecialMethodRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getSpecialMethodAccess().getDtoDtoReferenceCrossReference_4_0(), "dto"); 
	}

		// TODO assign feature to currentNode
	
)';' 
    {
        createLeafNode(grammarAccess.getSpecialMethodAccess().getSemicolonKeyword_5(), null); 
    }
);





// Entry rule entryRuleCrudService
entryRuleCrudService returns [EObject current=null] :
	{ currentNode = createCompositeNode(grammarAccess.getCrudServiceRule(), currentNode); }
	 iv_ruleCrudService=ruleCrudService 
	 { $current=$iv_ruleCrudService.current; } 
	 EOF 
;

// Rule CrudService
ruleCrudService returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	
	
	    lv_description_0=	RULE_STRING
	{
		createLeafNode(grammarAccess.getCrudServiceAccess().getDescriptionSTRINGTerminalRuleCall_0_0(), "description"); 
	}
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCrudServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "description", lv_description_0, "STRING", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }
	
)?'crud' 
    {
        createLeafNode(grammarAccess.getCrudServiceAccess().getCrudKeyword_1(), null); 
    }
(	
	
		
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getCrudServiceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getCrudServiceAccess().getDtoDtoReferenceCrossReference_2_0(), "dto"); 
	}

		// TODO assign feature to currentNode
	
)';' 
    {
        createLeafNode(grammarAccess.getCrudServiceAccess().getSemicolonKeyword_3(), null); 
    }
);





// Rule SpecialMethodType
ruleSpecialMethodType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'create' 
	{
        $current = grammarAccess.getSpecialMethodTypeAccess().getCREATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSpecialMethodTypeAccess().getCREATEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'read' 
	{
        $current = grammarAccess.getSpecialMethodTypeAccess().getREADEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSpecialMethodTypeAccess().getREADEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'update' 
	{
        $current = grammarAccess.getSpecialMethodTypeAccess().getUPDATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSpecialMethodTypeAccess().getUPDATEEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'delete' 
	{
        $current = grammarAccess.getSpecialMethodTypeAccess().getDELETEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSpecialMethodTypeAccess().getDELETEEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'listall' 
	{
        $current = grammarAccess.getSpecialMethodTypeAccess().getLISTALLEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSpecialMethodTypeAccess().getLISTALLEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'find' 
	{
        $current = grammarAccess.getSpecialMethodTypeAccess().getFINDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSpecialMethodTypeAccess().getFINDEnumLiteralDeclaration_5(), null); 
    }
));



// Rule AssociationMethodType
ruleAssociationMethodType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'add' 
	{
        $current = grammarAccess.getAssociationMethodTypeAccess().getADDTOEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssociationMethodTypeAccess().getADDTOEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'remove' 
	{
        $current = grammarAccess.getAssociationMethodTypeAccess().getREMOVEFROMEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssociationMethodTypeAccess().getREMOVEFROMEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'get' 
	{
        $current = grammarAccess.getAssociationMethodTypeAccess().getGETFROMEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssociationMethodTypeAccess().getGETFROMEnumLiteralDeclaration_2(), null); 
    }
));



// Rule CollectionType
ruleCollectionType returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'list' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getLISTEnumLiteralDeclaration().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCollectionTypeAccess().getLISTEnumLiteralDeclaration(), null); 
    }
);



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


