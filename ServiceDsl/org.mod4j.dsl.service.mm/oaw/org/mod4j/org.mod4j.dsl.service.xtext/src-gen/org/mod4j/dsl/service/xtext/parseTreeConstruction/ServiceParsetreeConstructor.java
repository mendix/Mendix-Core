/*
* generated by Xtext
*/
package org.mendix.dsl.service.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mendix.dsl.service.xtext.services.ServiceGrammarAccess;

import com.google.inject.Inject;

public class ServiceParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ServiceGrammarAccess grammarAccess;
		
	public ServiceGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceModel_Group(this, this, 0, inst);
			case 1: return new AssociationMethod_Group(this, this, 1, inst);
			case 2: return new DtoReference_Group(this, this, 2, inst);
			case 3: return new ServiceMethod_Alternatives(this, this, 3, inst);
			case 4: return new CustomMethod_Group(this, this, 4, inst);
			case 5: return new OutParameter_Group(this, this, 5, inst);
			case 6: return new Parameter_Group(this, this, 6, inst);
			case 7: return new SpecialMethod_Group(this, this, 7, inst);
			case 8: return new CrudService_Group(this, this, 8, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule ServiceModel ****************
 *
 * ServiceModel:
 *   description=STRING? "service" name=ID ";" dtoReferences+=DtoReference* (crudServices
 *   +=CrudService|methods+=ServiceMethod)*; 
 * 
 * / *******************************************************************************
 * 
 *  * Copyright (c) 2009 Ordina and committers to Mod4j
 * 
 *  * All rights reserved. This program and the accompanying materials
 * 
 *  * are made available under the terms of the Eclipse Public License v1.0
 * 
 *  * which accompanies this distribution, and is available at
 * 
 *  * http://www.eclipse.org/legal/epl-v10.html
 * 
 *  *
 * 
 *  * Contributors:
 * 
 *  *     Ordina - initial implementation
 * 
 *  ******************************************************************************* /
 *
 **/

// description=STRING? "service" name=ID ";" dtoReferences+=DtoReference* (crudServices
// +=CrudService|methods+=ServiceMethod)*
protected class ServiceModel_Group extends GroupToken {
	
	public ServiceModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceModel_Alternatives_5(parent, this, 0, inst);
			case 1: return new ServiceModel_DtoReferencesAssignment_4(parent, this, 1, inst);
			case 2: return new ServiceModel_SemicolonKeyword_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ServiceModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ServiceModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "service"
protected class ServiceModel_ServiceKeyword_1 extends KeywordToken  {
	
	public ServiceModel_ServiceKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getServiceKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class ServiceModel_NameAssignment_2 extends AssignmentToken  {
	
	public ServiceModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceModel_ServiceKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getServiceModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ServiceModel_SemicolonKeyword_3 extends KeywordToken  {
	
	public ServiceModel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceModel_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dtoReferences+=DtoReference*
protected class ServiceModel_DtoReferencesAssignment_4 extends AssignmentToken  {
	
	public ServiceModel_DtoReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getDtoReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dtoReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dtoReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getServiceModelAccess().getDtoReferencesDtoReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ServiceModel_DtoReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new ServiceModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (crudServices+=CrudService|methods+=ServiceMethod)*
protected class ServiceModel_Alternatives_5 extends AlternativesToken {

	public ServiceModel_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getAlternatives_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceModel_CrudServicesAssignment_5_0(parent, this, 0, inst);
			case 1: return new ServiceModel_MethodsAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// crudServices+=CrudService
protected class ServiceModel_CrudServicesAssignment_5_0 extends AssignmentToken  {
	
	public ServiceModel_CrudServicesAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getCrudServicesAssignment_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CrudService_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("crudServices",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("crudServices");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCrudServiceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getServiceModelAccess().getCrudServicesCrudServiceParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ServiceModel_Alternatives_5(parent, next, actIndex, consumed);
			case 1: return new ServiceModel_DtoReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new ServiceModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// methods+=ServiceMethod
protected class ServiceModel_MethodsAssignment_5_1 extends AssignmentToken  {
	
	public ServiceModel_MethodsAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getServiceModelAccess().getMethodsAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceMethod_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("methods",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("methods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getServiceMethodRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getServiceModelAccess().getMethodsServiceMethodParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ServiceModel_Alternatives_5(parent, next, actIndex, consumed);
			case 1: return new ServiceModel_DtoReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new ServiceModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule ServiceModel ****************/


/************ begin Rule AssociationMethod ****************
 *
 * AssociationMethod:
 *   description=STRING? name="for" main=[DtoReference] "reference" rolename=ID type=
 *   AssociationMethodType part=[DtoReference] ";";
 *
 **/

// description=STRING? name="for" main=[DtoReference] "reference" rolename=ID type=
// AssociationMethodType part=[DtoReference] ";"
protected class AssociationMethod_Group extends GroupToken {
	
	public AssociationMethod_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_SemicolonKeyword_7(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAssociationMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class AssociationMethod_DescriptionAssignment_0 extends AssignmentToken  {
	
	public AssociationMethod_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationMethodAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// name="for"
protected class AssociationMethod_NameAssignment_1 extends AssignmentToken  {
	
	public AssociationMethod_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if("for".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getAssociationMethodAccess().getNameForKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// main=[DtoReference]
protected class AssociationMethod_MainAssignment_2 extends AssignmentToken  {
	
	public AssociationMethod_MainAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getMainAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("main",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("main");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationMethodAccess().getMainDtoReferenceCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssociationMethodAccess().getMainDtoReferenceCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "reference"
protected class AssociationMethod_ReferenceKeyword_3 extends KeywordToken  {
	
	public AssociationMethod_ReferenceKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getReferenceKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_MainAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// rolename=ID
protected class AssociationMethod_RolenameAssignment_4 extends AssignmentToken  {
	
	public AssociationMethod_RolenameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getRolenameAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_ReferenceKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("rolename",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("rolename");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getAssociationMethodAccess().getRolenameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// type=AssociationMethodType
protected class AssociationMethod_TypeAssignment_5 extends AssignmentToken  {
	
	public AssociationMethod_TypeAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getTypeAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_RolenameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getAssociationMethodAccess().getTypeAssociationMethodTypeEnumRuleCall_5_0();
			return obj;
		}
		return null;
	}

}

// part=[DtoReference]
protected class AssociationMethod_PartAssignment_6 extends AssignmentToken  {
	
	public AssociationMethod_PartAssignment_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getPartAssignment_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_TypeAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("part",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("part");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssociationMethodAccess().getPartDtoReferenceCrossReference_6_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAssociationMethodAccess().getPartDtoReferenceCrossReference_6_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class AssociationMethod_SemicolonKeyword_7 extends KeywordToken  {
	
	public AssociationMethod_SemicolonKeyword_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAssociationMethodAccess().getSemicolonKeyword_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_PartAssignment_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule AssociationMethod ****************/


/************ begin Rule DtoReference ****************
 *
 * DtoReference:
 *   "from" modelname=ID "import" name=ID ";";
 *
 **/

// "from" modelname=ID "import" name=ID ";"
protected class DtoReference_Group extends GroupToken {
	
	public DtoReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_SemicolonKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "from"
protected class DtoReference_FromKeyword_0 extends KeywordToken  {
	
	public DtoReference_FromKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getFromKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// modelname=ID
protected class DtoReference_ModelnameAssignment_1 extends AssignmentToken  {
	
	public DtoReference_ModelnameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getModelnameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_FromKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelname",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelname");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoReferenceAccess().getModelnameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "import"
protected class DtoReference_ImportKeyword_2 extends KeywordToken  {
	
	public DtoReference_ImportKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getImportKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_ModelnameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// name=ID
protected class DtoReference_NameAssignment_3 extends AssignmentToken  {
	
	public DtoReference_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_ImportKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoReferenceAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DtoReference_SemicolonKeyword_4 extends KeywordToken  {
	
	public DtoReference_SemicolonKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoReferenceAccess().getSemicolonKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoReference_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DtoReference ****************/


/************ begin Rule ServiceMethod ****************
 *
 * ServiceMethod:
 *   CustomMethod|SpecialMethod|AssociationMethod; 
 * 
 * 
 * 
 *   
 * 
 * //	(description=STRING )?
 *
 **/

// CustomMethod|SpecialMethod|AssociationMethod 
// 
// //	(description=STRING )?
protected class ServiceMethod_Alternatives extends AlternativesToken {

	public ServiceMethod_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getServiceMethodAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ServiceMethod_CustomMethodParserRuleCall_0(parent, this, 0, inst);
			case 1: return new ServiceMethod_SpecialMethodParserRuleCall_1(parent, this, 1, inst);
			case 2: return new ServiceMethod_AssociationMethodParserRuleCall_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getServiceMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// CustomMethod
protected class ServiceMethod_CustomMethodParserRuleCall_0 extends RuleCallToken {
	
	public ServiceMethod_CustomMethodParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getServiceMethodAccess().getCustomMethodParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CustomMethod_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCustomMethodRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// SpecialMethod
protected class ServiceMethod_SpecialMethodParserRuleCall_1 extends RuleCallToken {
	
	public ServiceMethod_SpecialMethodParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getServiceMethodAccess().getSpecialMethodParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(SpecialMethod_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getSpecialMethodRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// AssociationMethod
protected class ServiceMethod_AssociationMethodParserRuleCall_2 extends RuleCallToken {
	
	public ServiceMethod_AssociationMethodParserRuleCall_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getServiceMethodAccess().getAssociationMethodParserRuleCall_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new AssociationMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(AssociationMethod_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getAssociationMethodRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule ServiceMethod ****************/


/************ begin Rule CustomMethod ****************
 *
 * CustomMethod:
 *   description=STRING? "method" name=ID ("in" "(" inParameters+=Parameter (","
 *   inParameters+=Parameter)* ")")? ("out" outParameter=OutParameter)? ";";
 *
 **/

// description=STRING? "method" name=ID ("in" "(" inParameters+=Parameter (","
// inParameters+=Parameter)* ")")? ("out" outParameter=OutParameter)? ";"
protected class CustomMethod_Group extends GroupToken {
	
	public CustomMethod_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCustomMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class CustomMethod_DescriptionAssignment_0 extends AssignmentToken  {
	
	public CustomMethod_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCustomMethodAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "method"
protected class CustomMethod_MethodKeyword_1 extends KeywordToken  {
	
	public CustomMethod_MethodKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getMethodKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CustomMethod_NameAssignment_2 extends AssignmentToken  {
	
	public CustomMethod_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_MethodKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCustomMethodAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ("in" "(" inParameters+=Parameter ("," inParameters+=Parameter)* ")")?
protected class CustomMethod_Group_3 extends GroupToken {
	
	public CustomMethod_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_RightParenthesisKeyword_3_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "in"
protected class CustomMethod_InKeyword_3_0 extends KeywordToken  {
	
	public CustomMethod_InKeyword_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getInKeyword_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "("
protected class CustomMethod_LeftParenthesisKeyword_3_1 extends KeywordToken  {
	
	public CustomMethod_LeftParenthesisKeyword_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getLeftParenthesisKeyword_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_InKeyword_3_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// inParameters+=Parameter
protected class CustomMethod_InParametersAssignment_3_2 extends AssignmentToken  {
	
	public CustomMethod_InParametersAssignment_3_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getInParametersAssignment_3_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inParameters",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCustomMethodAccess().getInParametersParameterParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CustomMethod_LeftParenthesisKeyword_3_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," inParameters+=Parameter)*
protected class CustomMethod_Group_3_3 extends GroupToken {
	
	public CustomMethod_Group_3_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getGroup_3_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_InParametersAssignment_3_3_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class CustomMethod_CommaKeyword_3_3_0 extends KeywordToken  {
	
	public CustomMethod_CommaKeyword_3_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getCommaKeyword_3_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_Group_3_3(parent, this, 0, inst);
			case 1: return new CustomMethod_InParametersAssignment_3_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// inParameters+=Parameter
protected class CustomMethod_InParametersAssignment_3_3_1 extends AssignmentToken  {
	
	public CustomMethod_InParametersAssignment_3_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getInParametersAssignment_3_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("inParameters",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("inParameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCustomMethodAccess().getInParametersParameterParserRuleCall_3_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CustomMethod_CommaKeyword_3_3_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ")"
protected class CustomMethod_RightParenthesisKeyword_3_4 extends KeywordToken  {
	
	public CustomMethod_RightParenthesisKeyword_3_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getRightParenthesisKeyword_3_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_Group_3_3(parent, this, 0, inst);
			case 1: return new CustomMethod_InParametersAssignment_3_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


// ("out" outParameter=OutParameter)?
protected class CustomMethod_Group_4 extends GroupToken {
	
	public CustomMethod_Group_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getGroup_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_OutParameterAssignment_4_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "out"
protected class CustomMethod_OutKeyword_4_0 extends KeywordToken  {
	
	public CustomMethod_OutKeyword_4_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getOutKeyword_4_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_Group_3(parent, this, 0, inst);
			case 1: return new CustomMethod_NameAssignment_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// outParameter=OutParameter
protected class CustomMethod_OutParameterAssignment_4_1 extends AssignmentToken  {
	
	public CustomMethod_OutParameterAssignment_4_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getOutParameterAssignment_4_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OutParameter_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("outParameter",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("outParameter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOutParameterRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCustomMethodAccess().getOutParameterOutParameterParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CustomMethod_OutKeyword_4_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ";"
protected class CustomMethod_SemicolonKeyword_5 extends KeywordToken  {
	
	public CustomMethod_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomMethodAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomMethod_Group_4(parent, this, 0, inst);
			case 1: return new CustomMethod_Group_3(parent, this, 1, inst);
			case 2: return new CustomMethod_NameAssignment_2(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CustomMethod ****************/


/************ begin Rule OutParameter ****************
 *
 * OutParameter returns Parameter:
 *   description=STRING? collection=CollectionType? type=[DtoReference]; 
 * 
 *      
 * 
 *     
 * 
 * 	  
 * 
 * 	    
 * 
 *     
 * 
 * //    name=ID
 *
 **/

// description=STRING? collection=CollectionType? type=[DtoReference] 
// 
// 	  
// 
// 	    
// 
//     
// 
// //    name=ID
protected class OutParameter_Group extends GroupToken {
	
	public OutParameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getOutParameterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OutParameter_TypeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getOutParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class OutParameter_DescriptionAssignment_0 extends AssignmentToken  {
	
	public OutParameter_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOutParameterAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getOutParameterAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// collection=CollectionType?
protected class OutParameter_CollectionAssignment_1 extends AssignmentToken  {
	
	public OutParameter_CollectionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOutParameterAccess().getCollectionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OutParameter_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collection",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collection");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getOutParameterAccess().getCollectionCollectionTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// type=[DtoReference] 
// 
//     
// 
// //    name=ID
protected class OutParameter_TypeAssignment_2 extends AssignmentToken  {
	
	public OutParameter_TypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getOutParameterAccess().getTypeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new OutParameter_CollectionAssignment_1(parent, this, 0, inst);
			case 1: return new OutParameter_DescriptionAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getOutParameterAccess().getTypeDtoReferenceCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getOutParameterAccess().getTypeDtoReferenceCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule OutParameter ****************/


/************ begin Rule Parameter ****************
 *
 * Parameter:
 *   description=STRING? collection=CollectionType? type=[DtoReference] name=ID;
 *
 **/

// description=STRING? collection=CollectionType? type=[DtoReference] name=ID
protected class Parameter_Group extends GroupToken {
	
	public Parameter_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getParameterAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_NameAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getParameterRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class Parameter_DescriptionAssignment_0 extends AssignmentToken  {
	
	public Parameter_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// collection=CollectionType?
protected class Parameter_CollectionAssignment_1 extends AssignmentToken  {
	
	public Parameter_CollectionAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getCollectionAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("collection",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("collection");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getParameterAccess().getCollectionCollectionTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// type=[DtoReference]
protected class Parameter_TypeAssignment_2 extends AssignmentToken  {
	
	public Parameter_TypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getTypeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_CollectionAssignment_1(parent, this, 0, inst);
			case 1: return new Parameter_DescriptionAssignment_0(parent, this, 1, inst);
			default: return parent.createParentFollower(this, index, index - 2, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getParameterAccess().getTypeDtoReferenceCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getParameterAccess().getTypeDtoReferenceCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// name=ID
protected class Parameter_NameAssignment_3 extends AssignmentToken  {
	
	public Parameter_NameAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getParameterAccess().getNameAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Parameter_TypeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule Parameter ****************/


/************ begin Rule SpecialMethod ****************
 *
 * SpecialMethod:
 *   description=STRING? type=SpecialMethodType name=ID "for" dto=[DtoReference] ";";
 *
 **/

// description=STRING? type=SpecialMethodType name=ID "for" dto=[DtoReference] ";"
protected class SpecialMethod_Group extends GroupToken {
	
	public SpecialMethod_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getSpecialMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class SpecialMethod_DescriptionAssignment_0 extends AssignmentToken  {
	
	public SpecialMethod_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSpecialMethodAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=SpecialMethodType
protected class SpecialMethod_TypeAssignment_1 extends AssignmentToken  {
	
	public SpecialMethod_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.ERC;
			element = grammarAccess.getSpecialMethodAccess().getTypeSpecialMethodTypeEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class SpecialMethod_NameAssignment_2 extends AssignmentToken  {
	
	public SpecialMethod_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getSpecialMethodAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "for"
protected class SpecialMethod_ForKeyword_3 extends KeywordToken  {
	
	public SpecialMethod_ForKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getForKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dto=[DtoReference]
protected class SpecialMethod_DtoAssignment_4 extends AssignmentToken  {
	
	public SpecialMethod_DtoAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getDtoAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_ForKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dto",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dto");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSpecialMethodAccess().getDtoDtoReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getSpecialMethodAccess().getDtoDtoReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class SpecialMethod_SemicolonKeyword_5 extends KeywordToken  {
	
	public SpecialMethod_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getSpecialMethodAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new SpecialMethod_DtoAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule SpecialMethod ****************/


/************ begin Rule CrudService ****************
 *
 * CrudService:
 *   description=STRING? "crud" dto=[DtoReference] ";";
 *
 **/

// description=STRING? "crud" dto=[DtoReference] ";"
protected class CrudService_Group extends GroupToken {
	
	public CrudService_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCrudServiceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CrudService_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCrudServiceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class CrudService_DescriptionAssignment_0 extends AssignmentToken  {
	
	public CrudService_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCrudServiceAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCrudServiceAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "crud"
protected class CrudService_CrudKeyword_1 extends KeywordToken  {
	
	public CrudService_CrudKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCrudServiceAccess().getCrudKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CrudService_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// dto=[DtoReference]
protected class CrudService_DtoAssignment_2 extends AssignmentToken  {
	
	public CrudService_DtoAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCrudServiceAccess().getDtoAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CrudService_CrudKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dto",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dto");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCrudServiceAccess().getDtoDtoReferenceCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getCrudServiceAccess().getDtoDtoReferenceCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class CrudService_SemicolonKeyword_3 extends KeywordToken  {
	
	public CrudService_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCrudServiceAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CrudService_DtoAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CrudService ****************/

}
