/*
 * generated by Xtext
 */
package org.mendix.dsl.datacontract.xtext.contentassist;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.core.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.core.editor.contentassist.ICompletionProposalAcceptor;
import org.mendix.crossx.broker.CrossxEnvironment;
import org.mendix.crossx.mm.crossx.ModelInfo;
import org.mendix.crossx.mm.crossx.Symbol;
import org.mendix.dsl.datacontract.mm.DataContractDsl.BusinessClassDto;
import org.mendix.dsl.datacontract.mm.DataContractDsl.ExternalReference;
import org.mendix.dsl.datacontract.xtext.contentassist.AbstractDataContractProposalProvider;
import org.mendix.eclipse.util.EclipseUtil;

/**
 * see http://wiki.eclipse.org/Xtext/Documentation#Content_Assist on how to customize content assistant
 */
public class DataContractProposalProvider extends AbstractDataContractProposalProvider {

    /**
     * Get rid of the "Name - ID" default proposals
     */
    @Override
    protected boolean doCreateIdProposals() {
        return false;
    }

    /**
     * Get rid of the "Description" default proposals
     */
    @Override
    protected boolean doCreateStringProposals() {
        return false;
    }

    @Override
    public void completeExternalReference_Modelname(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        List<ModelInfo> models = CrossxEnvironment.findAllModelsInProject(EclipseUtil.getProjectName(model));

        for (ModelInfo minfo : models) {
            if (minfo.getDslname().equals("BusinessDomainDsl")) {
                propose(minfo.getModelname(), context, acceptor);
            }
        }
    }

    @Override
    public void completeExternalReference_Name(EObject model, Assignment assignment, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        ExternalReference ref = (ExternalReference) model;
        List<Symbol> businessClasses = CrossxEnvironment.findAllFromModel(ref.getModelname(), "BusinessClass");
        List<Symbol> enumerations = CrossxEnvironment.findAllFromModel(ref.getModelname(), "Enumeration");

        for (Symbol sym : businessClasses) {
            propose(sym.getName(), context, acceptor);
        }
        for (Symbol sym : enumerations) {
            propose(sym.getName(), context, acceptor);
        }
    }

    @Override
    public void completeBusinessClassDto_PropertyReferences(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        BusinessClassDto bclass = (BusinessClassDto) model;
        List<String> baseproposals = Proposals.getBusinessClassReferenceProposals(bclass);

        for (String name : baseproposals) {
            propose(name, context, acceptor);
        }
    }

    @Override
    public void completeBusinessClassPropertyReference_Name(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

        BusinessClassDto bclass = (BusinessClassDto) model;
        List<String> baseproposals = Proposals.getBusinessClassReferenceProposals(bclass);

        for (String name : baseproposals) {
            propose(name, context, acceptor);
        }
    }

    @Override
    public void completeBusinessClassAssociationRoleReference_Name(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<String> baseproposals = Proposals.getBusinessClassAssociationRoleReferenceProposals(model);

        for (String name : baseproposals) {
            propose(name, context, acceptor);
        }
    }

    @Override
    public void completeBusinessClassAssociationRoleReference_DtoType(EObject model, Assignment assignment,
            ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        List<String> baseproposals = Proposals.getBusinessClassAssociationReferenceDtoProposals(model);

        for (String name : baseproposals) {
            propose(name, context, acceptor);
        }
    }

    /**
     * Create and register the proposal
     * 
     * @param name
     * @param context
     * @param acceptor
     */
    public void propose(String name, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
        String proposal = name;
        proposal = getValueConverter().toString(proposal, "reference");
        ICompletionProposal completionProposal = createCompletionProposal(proposal, context);
        acceptor.accept(completionProposal);
    }

}
// you can bind your custom implementation in your MyDslUiModule:
//
// public Class<? extends ICompletionProposalAcceptor.Delegate> bindICompletionProposalAcceptorDelegate() {
// return FilteringAcceptorDelegate.class;
// }
//
// It may be even easier to override
// AbstractContentProposalProvider.doCreateProposal(String, String, Image, int, int, ContentAssistContext)
// and return null for any unwanted proposal.
