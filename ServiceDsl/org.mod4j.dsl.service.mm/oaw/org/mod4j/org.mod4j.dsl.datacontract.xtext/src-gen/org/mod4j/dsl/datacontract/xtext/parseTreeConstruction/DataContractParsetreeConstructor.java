/*
* generated by Xtext
*/
package org.mendix.dsl.datacontract.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.mendix.dsl.datacontract.xtext.services.DataContractGrammarAccess;

import com.google.inject.Inject;

public class DataContractParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private DataContractGrammarAccess grammarAccess;
		
	public DataContractGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataContractModel_Group(this, this, 0, inst);
			case 1: return new Dto_Alternatives(this, this, 1, inst);
			case 2: return new ExternalReference_Group(this, this, 2, inst);
			case 3: return new BusinessClassDto_Group(this, this, 3, inst);
			case 4: return new EnumerationDto_Group(this, this, 4, inst);
			case 5: return new BusinessClassPropertyReference_Group(this, this, 5, inst);
			case 6: return new BusinessClassAssociationRoleReference_Group(this, this, 6, inst);
			case 7: return new CustomDto_Group(this, this, 7, inst);
			case 8: return new DtoProperty_Group(this, this, 8, inst);
			case 9: return new DtoBooleanProperty_Group(this, this, 9, inst);
			case 10: return new DtoStringProperty_Group(this, this, 10, inst);
			case 11: return new DtoDateTimeProperty_Group(this, this, 11, inst);
			case 12: return new DtoIntegerProperty_Group(this, this, 12, inst);
			case 13: return new DtoDecimalProperty_Group(this, this, 13, inst);
			case 14: return new DtoEnumerationProperty_Group(this, this, 14, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule DataContractModel ****************
 *
 * DataContractModel:
 *   description=STRING? "datacontract" name=ID ";" externalReferences+=ExternalReference
 *   * (dtos+=Dto|enumerations+=EnumerationDto)*; 
 * 
 * 
 * 
 * // importMetamodel "http://www.mendix.org/datacontract" ;
 *
 **/

// description=STRING? "datacontract" name=ID ";" externalReferences+=ExternalReference
// * (dtos+=Dto|enumerations+=EnumerationDto)*
protected class DataContractModel_Group extends GroupToken {
	
	public DataContractModel_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataContractModel_Alternatives_5(parent, this, 0, inst);
			case 1: return new DataContractModel_ExternalReferencesAssignment_4(parent, this, 1, inst);
			case 2: return new DataContractModel_SemicolonKeyword_3(parent, this, 2, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDataContractModelRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DataContractModel_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DataContractModel_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDataContractModelAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "datacontract"
protected class DataContractModel_DatacontractKeyword_1 extends KeywordToken  {
	
	public DataContractModel_DatacontractKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getDatacontractKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataContractModel_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class DataContractModel_NameAssignment_2 extends AssignmentToken  {
	
	public DataContractModel_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataContractModel_DatacontractKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDataContractModelAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class DataContractModel_SemicolonKeyword_3 extends KeywordToken  {
	
	public DataContractModel_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataContractModel_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// externalReferences+=ExternalReference*
protected class DataContractModel_ExternalReferencesAssignment_4 extends AssignmentToken  {
	
	public DataContractModel_ExternalReferencesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getExternalReferencesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("externalReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("externalReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataContractModelAccess().getExternalReferencesExternalReferenceParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataContractModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new DataContractModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// (dtos+=Dto|enumerations+=EnumerationDto)*
protected class DataContractModel_Alternatives_5 extends AlternativesToken {

	public DataContractModel_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getAlternatives_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DataContractModel_DtosAssignment_5_0(parent, this, 0, inst);
			case 1: return new DataContractModel_EnumerationsAssignment_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// dtos+=Dto
protected class DataContractModel_DtosAssignment_5_0 extends AssignmentToken  {
	
	public DataContractModel_DtosAssignment_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getDtosAssignment_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dto_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dtos",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dtos");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataContractModelAccess().getDtosDtoParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataContractModel_Alternatives_5(parent, next, actIndex, consumed);
			case 1: return new DataContractModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new DataContractModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// enumerations+=EnumerationDto
protected class DataContractModel_EnumerationsAssignment_5_1 extends AssignmentToken  {
	
	public DataContractModel_EnumerationsAssignment_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDataContractModelAccess().getEnumerationsAssignment_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("enumerations",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("enumerations");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationDtoRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getDataContractModelAccess().getEnumerationsEnumerationDtoParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new DataContractModel_Alternatives_5(parent, next, actIndex, consumed);
			case 1: return new DataContractModel_ExternalReferencesAssignment_4(parent, next, actIndex, consumed);
			case 2: return new DataContractModel_SemicolonKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule DataContractModel ****************/


/************ begin Rule Dto ****************
 *
 * Dto:
 *   BusinessClassDto|CustomDto;
 *
 **/

// BusinessClassDto|CustomDto
protected class Dto_Alternatives extends AlternativesToken {

	public Dto_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDtoAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Dto_BusinessClassDtoParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Dto_CustomDtoParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// BusinessClassDto
protected class Dto_BusinessClassDtoParserRuleCall_0 extends RuleCallToken {
	
	public Dto_BusinessClassDtoParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoAccess().getBusinessClassDtoParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BusinessClassDto_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBusinessClassDtoRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// CustomDto
protected class Dto_CustomDtoParserRuleCall_1 extends RuleCallToken {
	
	public Dto_CustomDtoParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoAccess().getCustomDtoParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomDto_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(CustomDto_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getCustomDtoRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Dto ****************/


/************ begin Rule ExternalReference ****************
 *
 * ExternalReference:
 *   description=STRING? "from" modelname=ID keyword=( "import" | "businessclass" |
 *   "enumeration" ) name=ID ";";  
 * 
 * 
 * 
 *   
 * 
 *     
 * 
 *                         
 * 
 *     
 * 
 * //BusinessClassReference:
 * 
 * //    (description=STRING)?
 * 
 * //    "from" modelname=ID "class" name=ID;
 * 
 *     
 * 
 * //BusinessEnumerationReference:
 * 
 * //    (description=STRING)?
 * 
 * //    "from" modelname=ID "enumeration" name=ID;
 *
 **/

// description=STRING? "from" modelname=ID keyword=( "import" | "businessclass" |
// "enumeration" ) name=ID ";"
protected class ExternalReference_Group extends GroupToken {
	
	public ExternalReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getExternalReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class ExternalReference_DescriptionAssignment_0 extends AssignmentToken  {
	
	public ExternalReference_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "from"
protected class ExternalReference_FromKeyword_1 extends KeywordToken  {
	
	public ExternalReference_FromKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getFromKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// modelname=ID
protected class ExternalReference_ModelnameAssignment_2 extends AssignmentToken  {
	
	public ExternalReference_ModelnameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getModelnameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_FromKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("modelname",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("modelname");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getModelnameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// keyword=( "import" | "businessclass" | "enumeration" )
protected class ExternalReference_KeywordAssignment_3 extends AssignmentToken  {
	
	public ExternalReference_KeywordAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getKeywordAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_ModelnameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("keyword",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("keyword");
		if("import".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getExternalReferenceAccess().getKeywordImportKeyword_3_0_0();
			return obj;
		}
		if("businessclass".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getExternalReferenceAccess().getKeywordBusinessclassKeyword_3_0_1();
			return obj;
		}
		if("enumeration".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getExternalReferenceAccess().getKeywordEnumerationKeyword_3_0_2();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class ExternalReference_NameAssignment_4 extends AssignmentToken  {
	
	public ExternalReference_NameAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getNameAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_KeywordAssignment_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getExternalReferenceAccess().getNameIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class ExternalReference_SemicolonKeyword_5 extends KeywordToken  {
	
	public ExternalReference_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getExternalReferenceAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new ExternalReference_NameAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule ExternalReference ****************/


/************ begin Rule BusinessClassDto ****************
 *
 * BusinessClassDto:
 *   description=STRING? "class" name=ID "represents" base=[ExternalReference] (";"|"["
 *   propertyReferences+=BusinessClassPropertyReference+ ("references" "["
 *   associationReferences+=BusinessClassAssociationRoleReference+ "]")? "]"); 
 * 
 *     
 * 
 * //BusinessClassReference:
 * 
 * //    (description=STRING)?
 * 
 * //    "from" modelname=ID "class" name=ID;
 * 
 *     
 * 
 * //BusinessEnumerationReference:
 * 
 * //    (description=STRING)?
 * 
 * //    "from" modelname=ID "enumeration" name=ID;
 *
 **/

// description=STRING? "class" name=ID "represents" base=[ExternalReference] (";"|"["
// propertyReferences+=BusinessClassPropertyReference+ ("references" "["
// associationReferences+=BusinessClassAssociationRoleReference+ "]")? "]")
protected class BusinessClassDto_Group extends GroupToken {
	
	public BusinessClassDto_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_Alternatives_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBusinessClassDtoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class BusinessClassDto_DescriptionAssignment_0 extends AssignmentToken  {
	
	public BusinessClassDto_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessClassDtoAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "class"
protected class BusinessClassDto_ClassKeyword_1 extends KeywordToken  {
	
	public BusinessClassDto_ClassKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getClassKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class BusinessClassDto_NameAssignment_2 extends AssignmentToken  {
	
	public BusinessClassDto_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_ClassKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessClassDtoAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "represents"
protected class BusinessClassDto_RepresentsKeyword_3 extends KeywordToken  {
	
	public BusinessClassDto_RepresentsKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getRepresentsKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// base=[ExternalReference]
protected class BusinessClassDto_BaseAssignment_4 extends AssignmentToken  {
	
	public BusinessClassDto_BaseAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getBaseAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_RepresentsKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("base",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBusinessClassDtoAccess().getBaseExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBusinessClassDtoAccess().getBaseExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"|"[" propertyReferences+=BusinessClassPropertyReference+ ("references" "["
// associationReferences+=BusinessClassAssociationRoleReference+ "]")? "]"
protected class BusinessClassDto_Alternatives_5 extends AlternativesToken {

	public BusinessClassDto_Alternatives_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getAlternatives_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_SemicolonKeyword_5_0(parent, this, 0, inst);
			case 1: return new BusinessClassDto_Group_5_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// ";"
protected class BusinessClassDto_SemicolonKeyword_5_0 extends KeywordToken  {
	
	public BusinessClassDto_SemicolonKeyword_5_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getSemicolonKeyword_5_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_BaseAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "[" propertyReferences+=BusinessClassPropertyReference+ ("references" "["
// associationReferences+=BusinessClassAssociationRoleReference+ "]")? "]"
protected class BusinessClassDto_Group_5_1 extends GroupToken {
	
	public BusinessClassDto_Group_5_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getGroup_5_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_RightSquareBracketKeyword_5_1_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class BusinessClassDto_LeftSquareBracketKeyword_5_1_0 extends KeywordToken  {
	
	public BusinessClassDto_LeftSquareBracketKeyword_5_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getLeftSquareBracketKeyword_5_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_BaseAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// propertyReferences+=BusinessClassPropertyReference+
protected class BusinessClassDto_PropertyReferencesAssignment_5_1_1 extends AssignmentToken  {
	
	public BusinessClassDto_PropertyReferencesAssignment_5_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getPropertyReferencesAssignment_5_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassPropertyReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("propertyReferences",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("propertyReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBusinessClassPropertyReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessClassDtoAccess().getPropertyReferencesBusinessClassPropertyReferenceParserRuleCall_5_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessClassDto_PropertyReferencesAssignment_5_1_1(parent, next, actIndex, consumed);
			case 1: return new BusinessClassDto_LeftSquareBracketKeyword_5_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("references" "[" associationReferences+=BusinessClassAssociationRoleReference+ "]"
// )?
protected class BusinessClassDto_Group_5_1_2 extends GroupToken {
	
	public BusinessClassDto_Group_5_1_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getGroup_5_1_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_RightSquareBracketKeyword_5_1_2_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "references"
protected class BusinessClassDto_ReferencesKeyword_5_1_2_0 extends KeywordToken  {
	
	public BusinessClassDto_ReferencesKeyword_5_1_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getReferencesKeyword_5_1_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_PropertyReferencesAssignment_5_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "["
protected class BusinessClassDto_LeftSquareBracketKeyword_5_1_2_1 extends KeywordToken  {
	
	public BusinessClassDto_LeftSquareBracketKeyword_5_1_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getLeftSquareBracketKeyword_5_1_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_ReferencesKeyword_5_1_2_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// associationReferences+=BusinessClassAssociationRoleReference+
protected class BusinessClassDto_AssociationReferencesAssignment_5_1_2_2 extends AssignmentToken  {
	
	public BusinessClassDto_AssociationReferencesAssignment_5_1_2_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getAssociationReferencesAssignment_5_1_2_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassAssociationRoleReference_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("associationReferences",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("associationReferences");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBusinessClassAssociationRoleReferenceRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBusinessClassDtoAccess().getAssociationReferencesBusinessClassAssociationRoleReferenceParserRuleCall_5_1_2_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BusinessClassDto_AssociationReferencesAssignment_5_1_2_2(parent, next, actIndex, consumed);
			case 1: return new BusinessClassDto_LeftSquareBracketKeyword_5_1_2_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class BusinessClassDto_RightSquareBracketKeyword_5_1_2_3 extends KeywordToken  {
	
	public BusinessClassDto_RightSquareBracketKeyword_5_1_2_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getRightSquareBracketKeyword_5_1_2_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_AssociationReferencesAssignment_5_1_2_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// "]"
protected class BusinessClassDto_RightSquareBracketKeyword_5_1_3 extends KeywordToken  {
	
	public BusinessClassDto_RightSquareBracketKeyword_5_1_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassDtoAccess().getRightSquareBracketKeyword_5_1_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassDto_Group_5_1_2(parent, this, 0, inst);
			case 1: return new BusinessClassDto_PropertyReferencesAssignment_5_1_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}




/************ end Rule BusinessClassDto ****************/


/************ begin Rule EnumerationDto ****************
 *
 * EnumerationDto:
 *   description=STRING? "enumeration" name=ID "represents" base=[ExternalReference] ";";
 *
 **/

// description=STRING? "enumeration" name=ID "represents" base=[ExternalReference] ";"
protected class EnumerationDto_Group extends GroupToken {
	
	public EnumerationDto_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getEnumerationDtoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class EnumerationDto_DescriptionAssignment_0 extends AssignmentToken  {
	
	public EnumerationDto_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationDtoAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "enumeration"
protected class EnumerationDto_EnumerationKeyword_1 extends KeywordToken  {
	
	public EnumerationDto_EnumerationKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getEnumerationKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class EnumerationDto_NameAssignment_2 extends AssignmentToken  {
	
	public EnumerationDto_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_EnumerationKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getEnumerationDtoAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "represents"
protected class EnumerationDto_RepresentsKeyword_3 extends KeywordToken  {
	
	public EnumerationDto_RepresentsKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getRepresentsKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// base=[ExternalReference]
protected class EnumerationDto_BaseAssignment_4 extends AssignmentToken  {
	
	public EnumerationDto_BaseAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getBaseAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_RepresentsKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("base",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("base");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEnumerationDtoAccess().getBaseExternalReferenceCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getEnumerationDtoAccess().getBaseExternalReferenceCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class EnumerationDto_SemicolonKeyword_5 extends KeywordToken  {
	
	public EnumerationDto_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getEnumerationDtoAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new EnumerationDto_BaseAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule EnumerationDto ****************/


/************ begin Rule BusinessClassPropertyReference ****************
 *
 * BusinessClassPropertyReference:
 *   name=ID ";";
 *
 **/

// name=ID ";"
protected class BusinessClassPropertyReference_Group extends GroupToken {
	
	public BusinessClassPropertyReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassPropertyReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassPropertyReference_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBusinessClassPropertyReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class BusinessClassPropertyReference_NameAssignment_0 extends AssignmentToken  {
	
	public BusinessClassPropertyReference_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassPropertyReferenceAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessClassPropertyReferenceAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class BusinessClassPropertyReference_SemicolonKeyword_1 extends KeywordToken  {
	
	public BusinessClassPropertyReference_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassPropertyReferenceAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassPropertyReference_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BusinessClassPropertyReference ****************/


/************ begin Rule BusinessClassAssociationRoleReference ****************
 *
 * BusinessClassAssociationRoleReference:
 *   name=ID "as" dtoType=[Dto] ";";
 *
 **/

// name=ID "as" dtoType=[Dto] ";"
protected class BusinessClassAssociationRoleReference_Group extends GroupToken {
	
	public BusinessClassAssociationRoleReference_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassAssociationRoleReference_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBusinessClassAssociationRoleReferenceRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// name=ID
protected class BusinessClassAssociationRoleReference_NameAssignment_0 extends AssignmentToken  {
	
	public BusinessClassAssociationRoleReference_NameAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getNameAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getNameIDTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "as"
protected class BusinessClassAssociationRoleReference_AsKeyword_1 extends KeywordToken  {
	
	public BusinessClassAssociationRoleReference_AsKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getAsKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassAssociationRoleReference_NameAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// dtoType=[Dto]
protected class BusinessClassAssociationRoleReference_DtoTypeAssignment_2 extends AssignmentToken  {
	
	public BusinessClassAssociationRoleReference_DtoTypeAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getDtoTypeAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassAssociationRoleReference_AsKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dtoType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dtoType");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getDtoTypeDtoCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getDtoTypeDtoCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class BusinessClassAssociationRoleReference_SemicolonKeyword_3 extends KeywordToken  {
	
	public BusinessClassAssociationRoleReference_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBusinessClassAssociationRoleReferenceAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BusinessClassAssociationRoleReference_DtoTypeAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BusinessClassAssociationRoleReference ****************/


/************ begin Rule CustomDto ****************
 *
 * CustomDto:
 *   description=STRING? "custom" name=ID "[" properties+=DtoProperty+ "]";
 *
 **/

// description=STRING? "custom" name=ID "[" properties+=DtoProperty+ "]"
protected class CustomDto_Group extends GroupToken {
	
	public CustomDto_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomDto_RightSquareBracketKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getCustomDtoRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class CustomDto_DescriptionAssignment_0 extends AssignmentToken  {
	
	public CustomDto_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCustomDtoAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "custom"
protected class CustomDto_CustomKeyword_1 extends KeywordToken  {
	
	public CustomDto_CustomKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getCustomKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomDto_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
}

// name=ID
protected class CustomDto_NameAssignment_2 extends AssignmentToken  {
	
	public CustomDto_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomDto_CustomKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getCustomDtoAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class CustomDto_LeftSquareBracketKeyword_3 extends KeywordToken  {
	
	public CustomDto_LeftSquareBracketKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getLeftSquareBracketKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomDto_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// properties+=DtoProperty+
protected class CustomDto_PropertiesAssignment_4 extends AssignmentToken  {
	
	public CustomDto_PropertiesAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getPropertiesAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("properties",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("properties");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoPropertyRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getCustomDtoAccess().getPropertiesDtoPropertyParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new CustomDto_PropertiesAssignment_4(parent, next, actIndex, consumed);
			case 1: return new CustomDto_LeftSquareBracketKeyword_3(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "]"
protected class CustomDto_RightSquareBracketKeyword_5 extends KeywordToken  {
	
	public CustomDto_RightSquareBracketKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getCustomDtoAccess().getRightSquareBracketKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new CustomDto_PropertiesAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule CustomDto ****************/


/************ begin Rule DtoProperty ****************
 *
 * DtoProperty:
 *   (DtoBooleanProperty|DtoStringProperty|DtoDateTimeProperty|DtoIntegerProperty|
 *   DtoDecimalProperty|DtoEnumerationProperty) ";";     
 * 
 * 
 * 
 * 
 * 
 * //   (description=STRING)?
 *
 **/

// (DtoBooleanProperty|DtoStringProperty|DtoDateTimeProperty|DtoIntegerProperty|
// DtoDecimalProperty|DtoEnumerationProperty) ";" 
// 
// //   (description=STRING)?
protected class DtoProperty_Group extends GroupToken {
	
	public DtoProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoProperty_SemicolonKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// DtoBooleanProperty|DtoStringProperty|DtoDateTimeProperty|DtoIntegerProperty|
// DtoDecimalProperty|DtoEnumerationProperty 
// 
// //   (description=STRING)?
protected class DtoProperty_Alternatives_0 extends AlternativesToken {

	public DtoProperty_Alternatives_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getAlternatives_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoProperty_DtoBooleanPropertyParserRuleCall_0_0(parent, this, 0, inst);
			case 1: return new DtoProperty_DtoStringPropertyParserRuleCall_0_1(parent, this, 1, inst);
			case 2: return new DtoProperty_DtoDateTimePropertyParserRuleCall_0_2(parent, this, 2, inst);
			case 3: return new DtoProperty_DtoIntegerPropertyParserRuleCall_0_3(parent, this, 3, inst);
			case 4: return new DtoProperty_DtoDecimalPropertyParserRuleCall_0_4(parent, this, 4, inst);
			case 5: return new DtoProperty_DtoEnumerationPropertyParserRuleCall_0_5(parent, this, 5, inst);
			default: return null;
		}	
	}	
		
}

// DtoBooleanProperty
protected class DtoProperty_DtoBooleanPropertyParserRuleCall_0_0 extends RuleCallToken {
	
	public DtoProperty_DtoBooleanPropertyParserRuleCall_0_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getDtoBooleanPropertyParserRuleCall_0_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoBooleanProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoBooleanProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoBooleanPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DtoStringProperty
protected class DtoProperty_DtoStringPropertyParserRuleCall_0_1 extends RuleCallToken {
	
	public DtoProperty_DtoStringPropertyParserRuleCall_0_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getDtoStringPropertyParserRuleCall_0_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoStringProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoStringProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoStringPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DtoDateTimeProperty
protected class DtoProperty_DtoDateTimePropertyParserRuleCall_0_2 extends RuleCallToken {
	
	public DtoProperty_DtoDateTimePropertyParserRuleCall_0_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getDtoDateTimePropertyParserRuleCall_0_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDateTimeProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoDateTimeProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoDateTimePropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DtoIntegerProperty
protected class DtoProperty_DtoIntegerPropertyParserRuleCall_0_3 extends RuleCallToken {
	
	public DtoProperty_DtoIntegerPropertyParserRuleCall_0_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getDtoIntegerPropertyParserRuleCall_0_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoIntegerProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoIntegerProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoIntegerPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DtoDecimalProperty
protected class DtoProperty_DtoDecimalPropertyParserRuleCall_0_4 extends RuleCallToken {
	
	public DtoProperty_DtoDecimalPropertyParserRuleCall_0_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getDtoDecimalPropertyParserRuleCall_0_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDecimalProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoDecimalProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoDecimalPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// DtoEnumerationProperty
protected class DtoProperty_DtoEnumerationPropertyParserRuleCall_0_5 extends RuleCallToken {
	
	public DtoProperty_DtoEnumerationPropertyParserRuleCall_0_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getDtoEnumerationPropertyParserRuleCall_0_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoEnumerationProperty_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(DtoEnumerationProperty_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getDtoEnumerationPropertyRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


// ";"
protected class DtoProperty_SemicolonKeyword_1 extends KeywordToken  {
	
	public DtoProperty_SemicolonKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getDtoPropertyAccess().getSemicolonKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoProperty_Alternatives_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule DtoProperty ****************/


/************ begin Rule DtoBooleanProperty ****************
 *
 * DtoBooleanProperty:
 *   description=STRING? dataType="boolean" name=ID;
 *
 **/

// description=STRING? dataType="boolean" name=ID
protected class DtoBooleanProperty_Group extends GroupToken {
	
	public DtoBooleanProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoBooleanPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoBooleanProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoBooleanPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DtoBooleanProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DtoBooleanProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoBooleanPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoBooleanPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="boolean"
protected class DtoBooleanProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DtoBooleanProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoBooleanPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoBooleanProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("boolean".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDtoBooleanPropertyAccess().getDataTypeBooleanKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class DtoBooleanProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DtoBooleanProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoBooleanPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoBooleanProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoBooleanPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DtoBooleanProperty ****************/


/************ begin Rule DtoStringProperty ****************
 *
 * DtoStringProperty:
 *   description=STRING? dataType="string" name=ID;
 *
 **/

// description=STRING? dataType="string" name=ID
protected class DtoStringProperty_Group extends GroupToken {
	
	public DtoStringProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoStringPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoStringProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoStringPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DtoStringProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DtoStringProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoStringPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoStringPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="string"
protected class DtoStringProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DtoStringProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoStringPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoStringProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("string".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDtoStringPropertyAccess().getDataTypeStringKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class DtoStringProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DtoStringProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoStringPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoStringProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoStringPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DtoStringProperty ****************/


/************ begin Rule DtoDateTimeProperty ****************
 *
 * DtoDateTimeProperty:
 *   description=STRING? dataType="datetime" name=ID; 
 * 
 * 
 * 
 * 
 * 
 *    
 * 
 *     
 * 
 * //    accuracy=DateTimeAccuracy
 * 
 *      
 * 
 *     
 * 
 * 
 * 
 * //Enum DateTimeAccuracy:
 * 
 * //    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
 * 
 * //    Second = "second" | Millisecond = "millisecond"
 * 
 * //    ;
 *
 **/

// description=STRING? dataType="datetime" name=ID 
// 
//    
// 
//     
// 
// //    accuracy=DateTimeAccuracy
protected class DtoDateTimeProperty_Group extends GroupToken {
	
	public DtoDateTimeProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoDateTimePropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDateTimeProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoDateTimePropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DtoDateTimeProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DtoDateTimeProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoDateTimePropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoDateTimePropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="datetime" 
// 
//     
// 
// //    accuracy=DateTimeAccuracy
protected class DtoDateTimeProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DtoDateTimeProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoDateTimePropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDateTimeProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("datetime".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDtoDateTimePropertyAccess().getDataTypeDatetimeKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID 
// 
// //    accuracy=DateTimeAccuracy
protected class DtoDateTimeProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DtoDateTimeProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoDateTimePropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDateTimeProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoDateTimePropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DtoDateTimeProperty ****************/


/************ begin Rule DtoIntegerProperty ****************
 *
 * DtoIntegerProperty:
 *   description=STRING? dataType="integer" name=ID; 
 * 
 * 
 * 
 * //Enum DateTimeAccuracy:
 * 
 * //    Month="month" | Year="year" | Day = "day" | Hour = "hour" | Minute = "minute" |
 * 
 * //    Second = "second" | Millisecond = "millisecond"
 * 
 * //    ;
 *
 **/

// description=STRING? dataType="integer" name=ID
protected class DtoIntegerProperty_Group extends GroupToken {
	
	public DtoIntegerProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoIntegerPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoIntegerProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoIntegerPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DtoIntegerProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DtoIntegerProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoIntegerPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoIntegerPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="integer"
protected class DtoIntegerProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DtoIntegerProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoIntegerPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoIntegerProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("integer".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDtoIntegerPropertyAccess().getDataTypeIntegerKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class DtoIntegerProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DtoIntegerProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoIntegerPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoIntegerProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoIntegerPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DtoIntegerProperty ****************/


/************ begin Rule DtoDecimalProperty ****************
 *
 * DtoDecimalProperty:
 *   description=STRING? dataType="decimal" name=ID;
 *
 **/

// description=STRING? dataType="decimal" name=ID
protected class DtoDecimalProperty_Group extends GroupToken {
	
	public DtoDecimalProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoDecimalPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDecimalProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoDecimalPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DtoDecimalProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DtoDecimalProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoDecimalPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoDecimalPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// dataType="decimal"
protected class DtoDecimalProperty_DataTypeAssignment_1 extends AssignmentToken  {
	
	public DtoDecimalProperty_DataTypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoDecimalPropertyAccess().getDataTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDecimalProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("dataType",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("dataType");
		if("decimal".equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getDtoDecimalPropertyAccess().getDataTypeDecimalKeyword_1_0();
			return obj;
		}
		return null;
	}

}

// name=ID
protected class DtoDecimalProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DtoDecimalProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoDecimalPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoDecimalProperty_DataTypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoDecimalPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DtoDecimalProperty ****************/


/************ begin Rule DtoEnumerationProperty ****************
 *
 * DtoEnumerationProperty:
 *   description=STRING? type=[EnumerationDto] name=ID;
 *
 **/

// description=STRING? type=[EnumerationDto] name=ID
protected class DtoEnumerationProperty_Group extends GroupToken {
	
	public DtoEnumerationProperty_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getDtoEnumerationPropertyAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoEnumerationProperty_NameAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getDtoEnumerationPropertyRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// description=STRING?
protected class DtoEnumerationProperty_DescriptionAssignment_0 extends AssignmentToken  {
	
	public DtoEnumerationProperty_DescriptionAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoEnumerationPropertyAccess().getDescriptionAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("description",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("description");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoEnumerationPropertyAccess().getDescriptionSTRINGTerminalRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// type=[EnumerationDto]
protected class DtoEnumerationProperty_TypeAssignment_1 extends AssignmentToken  {
	
	public DtoEnumerationProperty_TypeAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoEnumerationPropertyAccess().getTypeAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoEnumerationProperty_DescriptionAssignment_0(parent, this, 0, inst);
			default: return parent.createParentFollower(this, index, index - 1, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("type",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDtoEnumerationPropertyAccess().getTypeEnumerationDtoCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getDtoEnumerationPropertyAccess().getTypeEnumerationDtoCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// name=ID
protected class DtoEnumerationProperty_NameAssignment_2 extends AssignmentToken  {
	
	public DtoEnumerationProperty_NameAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getDtoEnumerationPropertyAccess().getNameAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new DtoEnumerationProperty_TypeAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getDtoEnumerationPropertyAccess().getNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule DtoEnumerationProperty ****************/

}
