«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT DataContractDsl»
«IMPORT org::mod4j::dsl::datacontract::generator::xpand::java»
«IMPORT org::mod4j::dsl::datacontract::generator::xpand::maven»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::common::xtend::FileTracker»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::FileTracker»

«DEFINE Generate FOR DataContractModel»

	«print("MOD4J INFO: Running Data Contract generator on model [" + this.name + "]")»

    «FOREACH enumerations AS enum»
		«FILE generate(getServiceModuleName(), javaPathFileName(javaDtoClassPath(enum.name)))»
		    «EXPAND Enumeration::createEnumDto FOR enum»
		«ENDFILE»
		«FILE generate(getServiceModuleName(), javaPathFileName(javaTranslatorClassPath(enum.name)))»
		  	«EXPAND EnumTranslators::createTranslator FOR enum»
		«ENDFILE»
	«ENDFOREACH»
	
    «FOREACH dtos AS dto»
		«FILE generate(getServiceModuleName(), javaPathFileName(javaDtoClassPath(dto.name)))»
		  	«EXPAND dtoBean::createDto FOR dto»
		«ENDFILE»
		«FILE generate(getServiceModuleName(), javaPathFileName(javaTranslatorClassPath(dto.name)))»
		  	«EXPAND Translators::createTranslator FOR dto»
		«ENDFILE»
	«ENDFOREACH»

    «FILE generate(getServiceModuleName(), getServiceRootPackageAsPath() + "/dtoTranslatorsContext.xml")»
        «EXPAND TranslatorsConfig::Spring FOR this»
    «ENDFILE»

«ENDDEFINE»

«REM»
	Generation of Maven configuration files. 
«ENDREM»
«DEFINE generateMavenConfiguration FOR DataContractModel»
	
	«print("MOD4J INFO: Running Data Contract Maven generator on model [" + this.name + "]")»
    
    «IF !fileExist(getServiceModulePath() + "/pom.xml")»
        «FILE generateToMain(getServiceModuleName(), "pom.xml")-»
		  	«EXPAND ServiceModulePom::createServiceModulePom»
		«ENDFILE»
	«ELSE»
		«retain(getServiceModuleName(), "pom.xml")»
	«ENDIF»
«ENDDEFINE»
