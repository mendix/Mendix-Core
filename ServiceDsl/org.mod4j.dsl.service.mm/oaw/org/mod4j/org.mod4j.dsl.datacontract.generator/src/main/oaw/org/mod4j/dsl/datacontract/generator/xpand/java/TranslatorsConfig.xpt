«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT DataContractDsl»
«IMPORT org::mod4j::dslcommon::xpand::xml»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::datacontract::generator::xtend::Dto»
«EXTENSION org::mod4j::crossx::broker::xtend::Crossx»

«DEFINE Spring FOR DataContractModel »
<?xml version="1.0" encoding="UTF-8"?>
    «EXPAND XmlComments::regenerationWarningHeader ("Mod4j Spring generator: TranslatorConfig.xpt") FOR this»
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

«FOREACH findAllSymbols( getProject(), "Dto") AS dtoSymbol-»
    «IF getPropertyValue(dtoSymbol, "dtoType") == "BusinessClassDto"-»
    <bean id="«javaTranslatorClass(dtoSymbol.name).toFirstLower()»" class="«javaTranslatorClassPath(dtoSymbol.name)»">
   «FOREACH findAllSubSymbols(dtoSymbol, "AssociationRoleReference").getReferenceProperty("ReferencedDto").
                 collect(ref | lookupSymbol(ref.modelname, ref.symbolname, "Dto") ).toSet() AS referredType-»
       <property name="«referredType.name.toFirstLower()»Translator" ref="«referredType.name.toFirstLower()»Translator"/>
    «ENDFOREACH-»
   «FOREACH findAllSubSymbols(dtoSymbol, "AssociationRoleReference").getReferenceProperty("ReferencedDto").
                 collect(ref | lookupSymbol(ref.modelname, ref.symbolname, "Dto") ).getPropertyValue("businessClass").toSet() 
                 AS referredBusinessClass-»
       <property name="«referredBusinessClass.toFirstLower()»Dao" ref="«referredBusinessClass.toFirstLower()»Dao"/>
    «ENDFOREACH-»
    </bean>
    «ENDIF-»
«ENDFOREACH-»
</beans>
«ENDDEFINE»