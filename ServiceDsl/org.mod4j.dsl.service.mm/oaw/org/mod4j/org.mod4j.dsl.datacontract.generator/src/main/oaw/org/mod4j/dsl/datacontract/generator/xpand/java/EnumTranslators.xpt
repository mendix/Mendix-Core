«REM»
	  Copyright (c) 2009 Ordina and committers to Mod4j
	  All rights reserved. This program and the accompanying materials
	  are made available under the terms of the Eclipse Public License v1.0
	  which accompanies this distribution, and is available at
	  http://www.eclipse.org/legal/epl-v10.html
	 
	  Contributors:
	      Ordina - initial implementation
«ENDREM»
«IMPORT DataContractDsl»
«IMPORT org::mod4j::dslcommon::xpand::java»

«EXTENSION org::mod4j::dslcommon::xtend::generatorutil»
«EXTENSION org::mod4j::dslcommon::xtend::ProjectProperties»
«EXTENSION org::mod4j::common::xtend::NameMapper»
«EXTENSION org::mod4j::dsl::datacontract::generator::xtend::Dto»

«DEFINE createTranslator FOR EnumerationDto»
        «EXPAND JavaComments::regenerationWarningHeader ("Mod4j DatacontractDsl generator: EnumTranslators.xpt") FOR this»
         package «getTranslatorsPackage()»;
         
         import «getDomainRootPackage()».«javaClassName(base.name)»;
         import «getDtoPackage()».«javaClassName(name)»;

        /**
         * Translator for translating «javaClassName(base.name)» business classes from- and to «javaClassName(name)» data transfer objects. 
         *
         * @author generated by Mod4j
         */
         public class «javaTranslatorName(javaClassName(name))» {
         
              «EXPAND org::mod4j::dslcommon::xpand::java::Singleton::makeSingleton FOR javaTranslatorName(javaClassName(name)) -»
         
             /**
              * Translates a «javaClassName(name)» enumeration dto into a «javaClassName(base.name)» enumeration.
              *
              * @param source The {@link «javaClassName(name)»} enumeration dto to translate.
              *
              * @return {@link «javaClassName(base.name)»}, the resulting enumeration.
              */
              public synchronized «javaClassName(base.name)» fromDto(final «javaClassName(name)» source) {
                 
                  if( source == null ){
                      return null;
                  }
                  return «javaClassName(base.name)».value(source.id());              
              }
             
             /**
              * Translates a «javaClassName(base.name)» enumeration into a «javaClassName(name)» enumeration dto.
              *
              * @param source The {@link «javaClassName(base.name)»} enumeration to translate.
              *
              * @return {@link «javaClassName(name)»}, the resulting enumeration dto.
              */
              public synchronized «javaClassName(name)» toDto(final «javaClassName(base.name)» source) {
                 
                  if( source == null ){
                      return null;
                  }
                  return «javaClassName(name)».value(source.id());              
              }
          }
«ENDDEFINE»